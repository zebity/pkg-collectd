=head1 NAME

collectd.conf - Configuration for the system statistics collection daemon B<collectd>

=head1 SYNOPSIS

  BaseDir "/path/to/data/"
  PIDFile "/path/to/pidfile/collectd.pid"
  Server  "123.123.123.123" 12345

  LoadPlugin cpu
  LoadPlugin load
  LoadPlugin ping

  <Plugin ping>
    Host "example.org"
    Host "provider.net"
  </Plugin>

=head1 DESCRIPTION

This config file controls how the system statistics collection daemon
B<collectd> behaves. The most significant option is B<LoadPlugin>, which
controls which plugins to load. These plugins ultimately define collectd's
behavior.

The syntax of this config file is similar to the config file of the famous
B<Apache Webserver>. Each line contains either a key-value-pair or a
section-start or -end. Empty lines and everything after the hash-symbol `#' is
ignored. Values are either string, enclosed in double-quotes,
(floating-point-)numbers or a boolean expression, i.E<nbsp>e. either B<true> or
B<false>. String containing of only alphanumeric characters and underscores do
not need to be quoted.

The configuration is read and processed in order, i.E<nbsp>e. from top to
bottom. So the plugins are loaded in the order listed in this config file. It
is a good idea to load any logging plugins first in order to catch messages
from plugins during configuration. Also, the C<LoadPlugin> option B<must> occur
B<before> the C<E<lt>Plugin ...E<gt>> block.

=head1 GLOBAL OPTIONS

=over 4

=item B<BaseDir> I<Directory>

Sets the base directory. This is the directory beneath all RRD-files are
created. Possibly more subdirectories are created. This is also the working
directory for the daemon.

=item B<LoadPlugin> I<Plugin>

Loads the plugin I<Plugin>. There must be at least one such line or B<collectd>
will be mostly useless.

=item B<Include> I<Path>

If I<Path> points to a file, includes that file. If I<Path> points to a
directory, recursively includes all files within that directory and its
subdirectories. If the C<wordexp> function is available on your system,
shell-like wildcards are expanded before files are included. This means you can
use statements like the following:

  Include "/etc/collectd.d/*.conf"

To prevent loops and shooting yourself in the foot in interesting ways the
nesting is limited to a depth of 8E<nbsp>levels, which should be sufficient for
most uses. Since symlinks are followed it is still possible to crash the daemon
by looping symlinks. In our opinion significant stupidity should result in an
appropriate amount of pain.

It is no problem to have a block like C<E<lt>Plugin fooE<gt>> in more than one
file, but you cannot include files from within blocks.

=item B<PIDFile> I<File>

Sets where to write the PID file to. This file is overwritten when it exists
and deleted when the program is stopped. Some init-scripts might override this
setting using the B<-P> command-line option.

=item B<PluginDir> I<Directory>

Path to the plugins (shared objects) of collectd.

=item B<TypesDB> I<File> [I<File> ...]

Set one or more files that contain the data-set descriptions. See
L<types.db(5)> for a description of the format of this file.

=item B<Interval> I<Seconds>

Configures the interval in which to query the read plugins. Obviously smaller
values lead to a higher system load produced by collectd, while higher values
lead to more coarse statistics.

=item B<ReadThreads> I<Num>

Number of threads to start for reading plugins. The default value is B<5>, but
you may want to increase this if you have more than five plugins that take a
long time to read. Mostly those are plugin that do network-IO. Setting this to
a value higher than the number of plugins you've loaded is totally useless.

=item B<Hostname> I<Name>

Sets the hostname that identifies a host. If you omit this setting, the
hostname will be determinded using the L<gethostname(2)> system call.

=item B<FQDNLookup> B<true|false>

If B<Hostname> is determined automatically this setting controls whether or not
the daemon should try to figure out the "fully qualified domain name", FQDN.
This is done using a lookup of the name returned by C<gethostname>.

Using this feature (i.E<nbsp>e. setting this option to B<true>) is recommended.
However, to preserve backwards compatibility the default is set to B<false>.
The sample config file that is installed with C<makeE<nbsp>install> includes a
line which sets this option, though, so that default installations will have
this setting enabled.

=back

=head1 PLUGIN OPTIONS

Some plugins may register own options. These options must be enclosed in a
C<Plugin>-Section. Which options exist depends on the plugin used. Some plugins
require external configuration, too. The C<apache plugin>, for example,
required C<mod_status> to be configured in the webserver you're going to
collect data from. These plugins are listed below as well, even if they don't
require any configuration within collectd's configfile.

A list of all plugins and a short summary for each plugin can be found in the
F<README> file shipped with the sourcecode and hopefully binary packets as
well.

=head2 Plugin C<apache>

To configure the C<apache>-plugin you first need to configure the Apache
webserver correctly. The Apache-plugin C<mod_status> needs to be loaded and
working and the C<ExtendedStatus> directive needs to be B<enabled>. You can use
the following snipped to base your Apache config upon:

  ExtendedStatus on
  <IfModule mod_status.c>
    <Location /mod_status>
      SetHandler server-status
    </Location>
  </IfModule>

Since its C<mod_status> module is very similar to Apache's, B<lighttpd> is
also supported. It introduces a new field, called C<BusyServers>, to count the
number of currently connected clients. This field is also supported.

The following options are accepted by the C<apache>-plugin:

=over 4

=item B<URL> I<http://host/mod_status?auto>

Sets the URL of the C<mod_status> output. This needs to be the output generated
by C<ExtendedStatus on> and it needs to be the machine readable output
generated by appending the C<?auto> argument.

=item B<User> I<Username>

Optional user name needed for authentication.

=item B<Password> I<Password>

Optional password needed for authentication.

=item B<CACert> I<File>

File that holds one or more SSL certificates. If you want to use HTTPS you will
possibly need this option. What CA certificates come bundled with C<libcurl>
and are checked by default depends on the distribution you use.

=back

=head2 Plugin C<apcups>

=over 4

=item B<Host> I<Hostname>

Hostname of the host running B<apcupsd>. Defaults to B<localhost>. Please note
that IPv6 support has been disabled unless someone can confirm or decline that
B<apcupsd> can handle it.

=item B<Port> I<Port>

TCP-Port to connect to. Defaults to B<3551>.

=back

=head2 Plugin C<cpufreq>

This plugin doesn't have any options. It reads
F</sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq> (for the first CPU
installed) to get the current CPU frequency. If this file does not exist make
sure B<cpufreqd> (L<http://cpufreqd.sourceforge.net/>) or a similar tool is
installed and an "cpu governor" (that's a kernel module) is loaded.

=head2 Plugin C<csv>

=over 4

=item B<DataDir> I<Directory>

Set the directory to store CSV-files under. Per default CSV-files are generated
beneath the daemon's working directory, i.E<nbsp>e. the B<BaseDir>.

=item B<StoreRates> B<true|false>

If set to B<true>, convert counter values to rates. If set to B<false> (the
default) counter values are stored as is, i.E<nbsp>e. as an increasing integer
number.

=back

=head2 Plugin C<df>

=over 4

=item B<Device> I<Device>

Select partitions based on the devicename.

=item B<MountPoint> I<Directory>

Select partitions based on the mountpoint.

=item B<FSType> I<FSType>

Select partitions based on the filesystem type.

=item B<IgnoreSelected> I<true>|I<false>

Invert the selection: If set to true, all partitions B<except> the ones that
match any one of the criteria are collected. By default only selected
partitions are collected if a selection is made. If no selection is configured
at all, B<all> partitions are selected.

=back

=head2 Plugin C<dns>

=over 4

=item B<Interface> I<Interface>

The dns plugin uses B<libpcap> to capture dns traffic and analyses it. This
option sets the interface that should be used. If this option is not set, or
set to "any", the plugin will try to get packets from B<all> interfaces. This
may not work on certain platforms, such as MacE<nbsp>OSE<nbsp>X.

=item B<IgnoreSource> I<IP-address>

Ignore packets that originate from this address.

=back

=head2 Plugin C<email>

=over 4

=item B<SocketFile> I<Path>

Sets the socket-file which is to be created.

=item B<SocketGroup> I<Group>

If running as root change the group of the UNIX-socket after it has been
created. Defaults to B<collectd>.

=item B<SocketPerms> I<Permissions>

Change the file permissions of the UNIX-socket after it has been created. The
permissions must be given as a numeric, octal value as you would pass to
L<chmod(1)>. Defaults to B<0770>.

=item B<MaxConns> I<Number>

Sets the maximum number of connections that can be handled in parallel. Since
this many threads will be started immediately setting this to a very high
value will waste valuable resources. Defaults to B<5> and will be forced to be
at most B<16384> to prevent typos and dumb mistakes.

=back

=head2 Plugin C<exec>

Please make sure to read L<collectd-exec(5)> before using this plugin. It
contains valuable information on when the executable is executed and the
output that is expected from it.

=over 4

=item B<Exec> I<User>[:[I<Group>]] I<Executable> [I<E<lt>argE<gt>> [I<E<lt>argE<gt>> ...]]

=item B<NotificationExec> I<User>[:[I<Group>]] I<Executable> [I<E<lt>argE<gt>> [I<E<lt>argE<gt>> ...]]

Execute the executable I<Executable> as user I<User>. If the user name is
followed by a colon and a group name, the effective group is set to that group.
The real group and saved-set group will be set to the default group of that
user. If no group is given the effective group ID will be the same as the real
group ID.

Please note that in order to change the user and/or group the daemon needs
superuser privileges. If the daemon is run as an unprivileged user you must
specify the same user/group here. If the daemon is run with superuser
privileges, you must supply a non-root user here.

The executable may be followed by optional arguments that are passed to the
program. Please note that due to the configuration parsing numbers and boolean
values may be changed. If you want to be absolutely sure that something is
passed as-is please enclose it in quotes.

The B<Exec> and B<NotificationExec> statements change the semantics of the
programs executed, i.E<nbsp>e. the data passed to them and the response
expected from them. This is documented in great detail in L<collectd-exec(5)>.

=back

=head2 Plugin C<hddtemp>

To get values from B<hddtemp> collectd connects to B<localhost> (127.0.0.1),
port B<7634/tcp>. The B<Host> and B<Port> options can be used to change these
default values, see below. C<hddtemp> has to be running to work correctly. If
C<hddtemp> is not running timeouts may appear which may interfere with other
statistics..

The B<hddtemp> homepage can be found at
L<http://www.guzu.net/linux/hddtemp.php>.

=over 4

=item B<Host> I<Hostname>

Hostname to connect to. Defaults to B<127.0.0.1>.

=item B<Port> I<Port>

TCP-Port to connect to. Defaults to B<7634>.

=item B<TranslateDevicename> I<true>|I<false>

If enabled, translate the disk names to major/minor device numbers
(e.E<nbsp>g. "8-0" for /dev/sda). For backwards compatibility this defaults to
I<true> but it's recommended to disable it as it will probably be removed in
the next major version.

=back

=head2 Plugin C<interface>

=over 4

=item B<Interface> I<Interface>

Select this interface. By default these interfaces will then be collected. For
a more detailed description see B<IgnoreSelected> below.

=item B<IgnoreSelected> I<true>|I<false>

If no configuration if given, the B<traffic>-plugin will collect data from
all interfaces. This may not be practical, especially for loopback- and
similar interfaces. Thus, you can use the B<Interface>-option to pick the
interfaces you're interested in. Sometimes, however, it's easier/preferred
to collect all interfaces I<except> a few ones. This option enables you to
do that: By setting B<IgnoreSelected> to I<true> the effect of
B<Interface> is inversed: All selected interfaces are ignored and all
other interfaces are collected.

=back

=head2 Plugin C<iptables>

=over 4

=item B<Chain> I<Table> I<Chain> [I<Comment|Number> [I<Name>]]

Select the rules to count. If only I<Table> and I<Chain> are given, this plugin
will collect the counters of all rules which have a comment-match. The comment
is then used as type-instance.

If I<Comment> or I<Number> is given, only the rule with the matching comment or
the I<n>th rule will be collected. Again, the comment (or the number) will be
used as the type-instance.

If I<Name> is supplied, it will be used as the type-instance instead of the
comment or the number.

=back

=head2 Plugin C<irq>

=over 4

=item B<Irq> I<Irq>

Select this irq. By default these irqs will then be collected. For a more
detailed description see B<IgnoreSelected> below.

=item B<IgnoreSelected> I<true>|I<false>

If no configuration if given, the B<irq>-plugin will collect data from all
irqs. This may not be practical, especially if no interrupts happen. Thus, you
can use the B<Irq>-option to pick the interrupt you're interested in.
Sometimes, however, it's easier/preferred to collect all interrupts I<except> a
few ones. This option enables you to do that: By setting B<IgnoreSelected> to
I<true> the effect of B<Irq> is inversed: All selected interrupts are ignored
and all other interrupts are collected.

=back

=head2 Plugin C<libvirt>

This plugin allows CPU, disk and network load to be collected for virtualized
guests on the machine. This means that these characteristics can be collected
for guest systems without installing any software on them - collectd only runs
on the hosting system. The statistics are collected through libvirt
(L<http://libvirt.org/>).

Only I<Connection> is required.

=over 4

=item B<Connection> I<uri>

Connect to the hypervisor given by I<uri>. For example if using Xen use:

 Connection "xen:///"

Details which URIs allowed are given at L<http://libvirt.org/uri.html>.

=item B<RefreshInterval> I<seconds>

Refresh the list of domains and devices every I<seconds>. The default is 60
seconds. Setting this to be the same or smaller than the I<Interval> will cause
the list of domains and devices to be refreshed on every iteration.

Refreshing the devices in particular is quite a costly operation, so if your
virtualization setup is static you might consider increasing this. If this
option is set to 0, refreshing is disabled completely.

=item B<Domain> I<name>

=item B<BlockDevice> I<name:dev>

=item B<InterfaceDevice> I<name:dev>

=item B<IgnoreSelected> I<true>|I<false>

Select which domains and devices are collected.

If I<IgnoreSelected> is not given or I<false> then only the listed domains and
disk/network devices are collected.

If I<IgnoreSelected> is I<true> then the test is reversed and the listed
domains and disk/network devices are ignored, while the rest are collected.

The domain name and device names may use a regular expression, if the name is
surrounded by I</.../> and collectd was compiled with support for regexps.

The default is to collect statistics for all domains and all their devices.

Example:

 BlockDevice "/:hdb/"
 IgnoreSelected "true"

Ignore all I<hdb> devices on any domain, but other block devices (eg. I<hda>)
will be collected.

=item B<HostnameFormat> B<name|uuid|hostname|...>

When the libvirt plugin logs data, it sets the hostname of the collected data
according to this setting. The default is to use the guest name as provided by
the hypervisor, which is equal to setting B<name>.

B<uuid> means use the guest's UUID. This is useful if you want to track the
same guest across migrations.

B<hostname> means to use the global B<Hostname> setting, which is probably not
useful on its own because all guests will appear to have the same name.

You can also specify combinations of these fields. For example B<name uuid>
means to concatenate the guest name and UUID (with a literal colon character
between, thus I<"foo:1234-1234-1234-1234">).

=back

=head2 Plugin C<logfile>

=over 4

=item B<LogLevel> B<debug|info|notice|warning|err>

Sets the log-level. If, for example, set to B<notice>, then all events with
severity B<notice>, B<warning>, or B<err> will be written to the logfile.

Please note that B<debug> is only available if collectd has been compiled with
debugging support.

=item B<File> I<File>

Sets the file to write log messages to. The special strings B<stdout> and
B<stderr> can be used to write to the standard output and standard error
channels, respectively. This, of course, only makes much sense when collectd is
running in foreground- or non-daemon-mode.

=item B<Timestamp> B<true>|B<false>

Prefix all lines printed by the current time. Defaults to B<true>.

=back

=head2 Plugin C<mbmon>

The C<mbmon plugin> uses mbmon to retrieve temperature, voltage, etc.

Be default collectd connects to B<localhost> (127.0.0.1), port B<411/tcp>. The
B<Host> and B<Port> options can be used to change these values, see below.
C<mbmon> has to be running to work correctly. If C<mbmon> is not running
timeouts may appear which may interfere with other statistics..

C<mbmon> must be run with the -r option ("print TAG and Value format");
Debian's F</etc/init.d/mbmon> script already does this, other people
will need to ensure that this is the case.

=over 4

=item B<Host> I<Hostname>

Hostname to connect to. Defaults to B<127.0.0.1>.

=item B<Port> I<Port>

TCP-Port to connect to. Defaults to B<411>.

=back

=head2 Plugin C<memcached>

The C<memcached plugin> connects to a memcached server and queries statistics
about cache utilization, memory and bandwidth used.
L<http://www.danga.com/memcached/>

=over 4

=item B<Host> I<Hostname>

Hostname to connect to. Defaults to B<127.0.0.1>.

=item B<Port> I<Port>

TCP-Port to connect to. Defaults to B<11211>.

=back

=head2 Plugin C<mysql>

The C<mysql plugin> requires B<mysqlclient> to be installed. It connects to the
database when started and keeps the connection up as long as possible. When the
connection is interrupted for whatever reason it will try to re-connect. The
plugin will complaint loudly in case anything goes wrong.

This plugin issues C<SHOW STATUS> and evaluates C<Bytes_{received,sent}>,
C<Com_*> and C<Handler_*> which correspond to F<mysql_octets.rrd>,
F<mysql_commands-*.rrd> and F<mysql_handler-*.rrd>. Also, the values of
C<Qcache_*> are put in F<mysql_qcache.rrd> and values of C<Threads_*> are put
in F<mysql_threads.rrd>. Please refer to the B<MySQL reference manual>,
I<5.2.4. Server Status Variables> for an explanation of these values.

Use the following options to configure the plugin:

=over 4

=item B<Host> I<Hostname>

Hostname of the database server. Defaults to B<localhost>.

=item B<User> I<Username>

Username to use when connecting to the database.

=item B<Password> I<Password>

Password needed to log into the database.

=item B<Database> I<Database>

Select this database. Defaults to I<no database> which is a perfectly reasonable
option for what this plugin does.

=back

=head2 Plugin C<netlink>

The C<netlink> plugin uses a netlink socket to query the Linux kernel about
statistics of various interface and routing aspects.

=over 4

=item B<Interface> I<Interface>

=item B<VerboseInterface> I<Interface>

Instruct the plugin to collect interface statistics. This is basically the same
as the statistics provided by the C<interface> plugin (see above) but
potentially much more detailed.

When configuring with B<Interface> only the basic statistics will be collected,
namely octets, packets, and errors. These statistics are collected by
the C<interface> plugin, too, so using both at the same time is no benefit.

When configured with B<VerboseInterface> all counters B<except> the basic ones,
so that no data needs to be collected twice if you use the C<interface> plugin.
This includes dropped packets, received multicast packets, collisions and a
whole zoo of differentiated RX and TX errors. You can try the following command
to get an idea of what awaits you:

  ip -s -s link list

If I<Interface> is B<All>, all interfaces will be selected.

=item B<QDisc> I<Interface> [I<QDisc>]

=item B<Class> I<Interface> [I<Class>]

=item B<Filter> I<Interface> [I<Filter>]

Collect the octets and packets that pass a certain qdisc, class or filter.

QDiscs and classes are identified by their type and handle (or classid).
Filters don't necessarily have a handle, therefore the parent's handle is used.
The notation used in collectd differs from that used in tc(1) in that it
doesn't skip the major or minor number if it's zero and doesn't print special
ids by their name. So, for example, a qdisc may be identified by
C<pfifo_fast-1:0> even though the minor number of B<all> qdiscs is zero and
thus not displayed by tc(1).

If B<QDisc>, B<Class>, or B<Filter> is given without the second argument,
i.E<nbsp>.e. without an identifier, all qdiscs, classes, or filters that are
associated with that interface will be collected.

Since a filter itself doesn't necessarily have a handle, the parent's handle is
used. This may lead to problems when more than one filter is attached to a
qdisc or class. This isn't nice, but we don't know how this could be done any
better. If you have a idea, please don't hesitate to tell us.

As with the B<Interface> option you can specify B<All> as the interface,
meaning all interfaces.

Here are some examples to help you understand the above text more easily:

  <Plugin netlink>
    VerboseInterface "All"
    QDisc "eth0" "pfifo_fast-1:0"
    QDisc "ppp0"
    Class "ppp0" "htb-1:10"
    Filter "ppp0" "u32-1:0"
  </Plugin>

=item B<IgnoreSelected>

The behaviour is the same as with all other similar plugins: If nothing is
selected at all, everything is collected. If some things are selected using the
options described above, only these statistics are collected. If you set
B<IgnoreSelected> to B<true>, this behavior is inversed, i.E<nbsp>e. the
specified statistics will not be collected.

=back

=head2 Plugin C<network>

=over 4

=item B<Listen> I<Host> [I<Port>]

=item B<Server> I<Host> [I<Port>]

The B<Server> statement sets the server to send datagrams B<to>.  The statement
may occur multiple times to send each datagram to multiple destinations.

The B<Listen> statement sets the interfaces to bind to. When multiple
statements are found the daemon will bind to multiple interfaces.

The argument I<Host> may be a hostname, an IPv4 address or an IPv6 address. If
the argument is a multicast address the daemon will join that multicast group.

If no B<Listen> statement is found the server tries join both, the default IPv6
multicast group and the default IPv4 multicast group. If no B<Server> statement
is found the client will try to send data to the IPv6 multicast group first. If
that fails the client will try the IPv4 multicast group.

The default IPv6 multicast group is C<ff18::efc0:4a42>. The default IPv4
multicast group is C<239.192.74.66>.

The optional I<Port> argument sets the port to use. It can either be given
using a numeric port number or a service name. If the argument is omitted the
default port B<25826> is assumed.

=item B<TimeToLive> I<1-255>

Set the time-to-live of sent packets. This applies to all, unicast and
multicast, and IPv4 and IPv6 packets. The default is to not change this value.
That means that multicast packets will be sent with a TTL of C<1> (one) on most
operating systems.

=item B<Forward> I<true|false>

If set to I<true>, write packets that were received via the network plugin to
the sending sockets. This should only be activated when the B<Listen>- and
B<Server>-statements differ. Otherwise packets may be send multiple times to
the same multicast group. While this results in more network traffic than
necessary it's not a huge problem since the plugin has a duplicate detection,
so the values will not loop.

=item B<CacheFlush> I<Seconds>

For each host/plugin/type combination the C<network plugin> caches the time of
the last value being sent or received. Every I<Seconds> seconds the plugin
searches and removes all entries that are older than I<Seconds> seconds, thus
freeing the unused memory again. Since this process is somewhat expensive and
normally doesn't do much, this value should not be too small. The default is
1800 seconds, but setting this to 86400 seconds (one day) will not do much harm
either.

=back

=head2 Plugin C<nginx>

This plugin collects the number of connections and requests handled by the
C<nginx daemon> (speak: engineE<nbsp>X), a HTTP and mail server/proxy. It
queries the page provided by the C<ngx_http_stub_status_module> module, which
isn't compiled by default. Please refer to
L<http://wiki.codemongers.com/NginxStubStatusModule> for more information on
how to compile and configure nginx and this module.

The following options are accepted by the C<nginx plugin>:

=over 4

=item B<URL> I<http://host/nginx_status>

Sets the URL of the C<ngx_http_stub_status_module> output.

=item B<User> I<Username>

Optional user name needed for authentication.

=item B<Password> I<Password>

Optional password needed for authentication.

=item B<CACert> I<File>

File that holds one or more SSL certificates. If you want to use HTTPS you will
possibly need this option. What CA certificates come bundled with C<libcurl>
and are checked by default depends on the distribution you use.

=back

=head2 Plugin C<ntpd>

=over 4

=item B<Host> I<Hostname>

Hostname of the host running B<ntpd>. Defaults to B<localhost>.

=item B<Port> I<Port>

UDP-Port to connect to. Defaults to B<123>.

=item B<ReverseLookups> B<true>|B<false>

Sets wether or not to perform reverse lookups on peers. Since the name or
IP-address may be used in a filename it is recommended to disable reverse
lookups. The default is to do reverse lookups to preserve backwards
compatibility, though.

=back

=head2 Plugin C<nut>

=over 4

=item B<UPS> I<upsname>B<@>I<hostname>[B<:>I<port>]

Add a UPS to collect data from. The format is identical to the one accepted by
L<upsc(8)>.

=back

=head2 Plugin C<perl>

This plugin embeds a Perl-interpreter into collectd and provides an interface
to collectd's plugin system. See L<collectd-perl(5)> for its documentation.

=head2 Plugin C<ping>

=over 4

=item B<Host> I<IP-address>

Host to ping periodically. This option may be repeated several times to ping
multiple hosts.

=item B<TTL> I<0-255>

Sets the Time-To-Live of generated ICMP packets.

=back

=head2 Plugin C<processes>

=over 4

=item B<Process> I<Name>

Select more detailed statistics of processes matching this name. The statistics
collected for these selected processes are size of the resident segment size
(RSS), user- and system-time used, number of processes and number of threads,
and minor and major pagefaults.

=back

=head2 Plugin C<rrdtool>

You can use the settings B<StepSize>, B<HeartBeat>, B<RRARows>, and B<XFF> to
fine-tune your RRD-files. Please read L<rrdcreate(1)> if you encounter problems
using these settings. If you don't want to dive into the depths of RRDTool, you
can safely ignore these settings.

=over 4

=item B<DataDir> I<Directory>

Set the directory to store RRD-files under. Per default RRD-files are generated
beneath the daemon's working directory, i.E<nbsp>e. the B<BaseDir>.

=item B<StepSize> I<Seconds>

B<Force> the stepsize of newly created RRD-files. Ideally (and per default)
this setting is unset and the stepsize is set to the interval in which the data
is collected. Do not use this option unless you absolutely have to for some
reason. Setting this option may cause problems with the C<snmp plugin>, the
C<exec plugin> or when the daemon is set up to receive data from other hosts.

=item B<HeartBeat> I<Seconds>

B<Force> the heartbeat of newly created RRD-files. This setting should be unset
in which case the heartbeat is set to twice the B<StepSize> which should equal
the interval in which data is collected. Do not set this option unless you have
a very good reason to do so.

=item B<RRARows> I<NumRows>

The C<rrdtool plugin> calculates the number of PDPs per CDP based on the
B<StepSize>, this setting and a timespan. This plugin creates RRD-files with
three times five RRAs, i. e. five RRAs with the CFs B<MIN>, B<AVERAGE>, and
B<MAX>. The five RRAs are optimized for graphs covering one hour, one day, one
week, one month, and one year.

So for each timespan, it calculates how many PDPs need to be consolidated into
one CDP by calculating:
  number of PDPs = timespan / (stepsize * rrarows)

Bottom line is, set this no smaller than the width of you graphs in pixels. The
default is 1200.

=item B<RRATimespan> I<Seconds>

Adds an RRA-timespan, given in seconds. Use this option multiple times to have
more then one RRA. If this option is never used, the built-in default of (3600,
86400, 604800, 2678400, 31622400) is used.

For more information on how RRA-sizes are calculated see B<RRARows> above.

=item B<XFF> I<Factor>

Set the "XFiles Factor". The default is 0.1. If unsure, don't set this option.

=item B<CacheFlush> I<Seconds>

When the C<rrdtool plugin> uses a cache (by setting B<CacheTimeout>, see below)
it writes all values for a certain RRD-file if the oldest value is older than
(or equal to) the number of seconds specified. If some RRD-file is not updated
anymore for some reason (the computer was shut down, the network is broken,
etc.) some values may still be in the cache. If B<CacheFlush> is set, then the
entire cache is searched for entries older than B<CacheTimeout> seconds and
written to disk every I<Seconds> seconds. Since this is kind of expensive and
does nothing under normal circumstances, this value should not be too small.
900 seconds might be a good value, though setting this to 7200 seconds doesn't
normally do much harm either.

=item B<CacheTimeout> I<Seconds>

If this option is set to a value greater than zero, the C<rrdtool plugin> will
save values in a cache, as described above. Writing multiple values at once
reduces IO-operations and thus lessens the load produced by updating the files.
The trade off is that the graphs kind of "drag behind" and that more memory is
used.

=back

=head2 Plugin C<sensors>

The C<sensors plugin> uses B<lm_sensors> to retrieve sensor-values. This means
that all the needed modules have to be loaded and lm_sensors has to be
configured (most likely by editing F</etc/sensors.conf>. Read
L<sensors.conf(5)> for details.

The B<lm_sensors> homepage can be found at
L<http://secure.netroedge.com/~lm78/>.

=over 4

=item B<Sensor> I<chip-bus-address/type-feature>

Selects the name of the sensor which you want to collect or ignore, depending
on the B<IgnoreSelected> below. For example, the option "B<Sensor>
I<it8712-isa-0290/voltage-in1>" will cause collectd to gather data for the
voltage sensor I<in1> of the I<it8712> on the isa bus at the address 0290.

=item B<IgnoreSelected> I<true>|I<false>

If no configuration if given, the B<sensors>-plugin will collect data from all
sensors. This may not be practical, especially for uninteresting sensors.
Thus, you can use the B<Sensor>-option to pick the sensors you're interested
in. Sometimes, however, it's easier/preferred to collect all sensors I<except> a
few ones. This option enables you to do that: By setting B<IgnoreSelected> to
I<true> the effect of B<Sensor> is inversed: All selected sensors are ignored
and all other sensors are collected.

=back

=head2 Plugin C<snmp>

Since the configuration of the C<snmp plugin> is a little more complicated than
other plugins, its documentation has been moved to an own manpage,
L<collectd-snmp(5)>. Please see there for details.

=head2 Plugin C<syslog>

=over 4

=item B<LogLevel> B<debug|info|notice|warning|err>

Sets the log-level. If, for example, set to B<notice>, then all events with
severity B<notice>, B<warning>, or B<err> will be submitted to the
syslog-daemon.

Please note that B<debug> is only available if collectd has been compiled with
debugging support.

=back

=head2 Plugin C<tcpconns>

The C<tcpconns plugin> counts the number of currently established TCP
connections based on the local port and/or the remote port. Since there may be
a lot of connections the default if to count all connections with a local port,
for which a listening socket is opened. You can use the following options to
fine-tune the ports you are interested in:

=over 4

=item B<ListeningPorts> I<true>|I<false>

If this option is set to I<true>, statistics for all local ports for which a
listening socket exists are collected. The default depends on B<LocalPort> and
B<RemotePort> (see below): If no port at all is specifically selected, the
default is to collect listening ports. If specific ports (no matter if local or
remote ports) are selected, this option defaults to I<false>, i.E<nbsp>e. only
the selected ports will be collected unless this option is set to I<true>
specifically.

=item B<LocalPort> I<Port>

Count the connections to a specific local port. This can be used to see how
many connections are handled by a specific daemon, e.E<nbsp>g. the mailserver.
You have to specify the port in numeric form, so for the mailserver example
you'd need to set B<25>.

=item B<RemotePort> I<Port>

Count the connections to a specific remote port. This is useful to see how
much a remote service is used. This is most useful if you want to know how many
connections a local service has opened to remote services, e.E<nbsp>g. how many
connections a mail server or news server has to other mail or news servers, or
how many connections a web proxy holds to web servers. You have to give the
port in numeric form.

=back

=head2 Plugin C<unixsock>

=over 4

=item B<SocketFile> I<Path>

Sets the socket-file which is to be created.

=item B<SocketGroup> I<Group>

If running as root change the group of the UNIX-socket after it has been
created. Defaults to B<collectd>.

=item B<SocketPerms> I<Permissions>

Change the file permissions of the UNIX-socket after it has been created. The
permissions must be given as a numeric, octal value as you would pass to
L<chmod(1)>. Defaults to B<0770>.

=back

=head2 Plugin C<uuid>

This plugin, if loaded, causes the Hostname to be taken from the machine's
UUID. The UUID is a universally unique designation for the machine, usually
taken from the machine's BIOS. This is most useful if the machine is running in
a virtual environment such as Xen, in which case the UUID is preserved across
shutdowns and migration.

The following methods are used to find the machine's UUID, in order:

=over 4

=item

Check I</etc/uuid> (or I<UUIDFile>).

=item

Check for UUID from HAL (L<http://www.freedesktop.org/wiki/Software/hal>) if
present.

=item

Check for UUID from C<dmidecode> / SMBIOS.

=item

Check for UUID from Xen hypervisor.

=back

If no UUID can be found then the hostname is not modified.

=over 4

=item B<UUIDFile> I<Path>

Take the UUID from the given file (default I</etc/uuid>).

=back

=head2 Plugin C<vserver>

This plugin doesn't have any options. B<VServer> support is only available for
Linux. It cannot yet be found in a vanilla kernel, though. To make use of this
plugin you need a kernel that has B<VServer> support built in, i.E<nbsp>e. you
need to apply the patches and compile your own kernel, which will then provide
the F</proc/virtual> filesystem that is required by this plugin.

The B<VServer> homepage can be found at L<http://linux-vserver.org/>.

=head1 THRESHOLD CONFIGURATION

Starting with version C<4.3.0> collectd has support for B<monitoring>. By that
we mean that the values are not only stored or sent somewhere, but that they
are judged and, if a problem is recognized, acted upon. The only action
collectd takes itself is to generate and dispatch a "notification". Plugins can
register to receive notifications and perform appropriate further actions.

Since systems and what you expect them to do differ a lot, you can configure
B<thresholds> for your values freely. This gives you a lot of flexibility but
also a lot of responsibility.

Every time a value is out of range a notification is dispatched. This means
that the idle percentage of your CPU needs to be less then the configured
threshold only once for a notification to be generated. There's no such thing
as a moving average or similar - at least not now.

Also, all values that match a threshold are considered to be relevant or
"interesting". As a consequence collectd will issue a notification if they are
not received for twice the last timeout of the values. If, for example, some
hosts sends it's CPU statistics to the server every 60 seconds, a notification
will be dispatched after about 120 seconds. It may take a little longer because
the timeout is checked only once each B<Interval> on the server.

Here is a configuration example to get you started. Read below for more
information.

 <Threshold>
   <Type "foo">
     WarningMin    0.00
     WarningMax 1000.00
     FailureMin    0.00
     FailureMax 1200.00
     Invert false
     Instance "bar"
   </Type>

   <Plugin "interface">
     Instance "eth0"
     <Type "if_octets">
       FailureMax 10000000
     </Type>
   </Plugin>

   <Host "hostname">
     <Type "cpu">
       Instance "idle"
       FailureMin 10
     </Type>

     <Plugin "memory">
       <Type "memory">
         Instance "cached"
	 WarningMin 100000000
       </Type>
     </Plugin>
   </Host>
 </Threshold>

There are basically two types of configuration statements: The C<Host>,
C<Plugin>, and C<Type> blocks select the value for which a threshold should be
configured. The C<Plugin> and C<Type> blocks may be specified further using the
C<Instance> option. You can combine the block by nesting the blocks, though
they must be nested in the above order, i.E<nbsp>e. C<Host> may contain either
C<Plugin> and C<Type> blocks, C<Plugin> may only contain C<Type> blocks and
C<Type> may not contain other blocks. If multiple blocks apply to the same
value the most specific block is used.

The other statements specify the threshold to configure. They B<must> be
included in a C<Type> block. Currently the following statements are recognized:

=over 4

=item B<FailureMax> I<Value>

=item B<WarningMax> I<Value>

Sets the upper bound of acceptable values. If unset defaults to positive
infinity. If a value is greater than B<FailureMax> a B<FAILURE> notification
will be created. If the value is greater than B<WarningMax> but less than (or
equal to) B<FailureMax> a B<WARNING> notification will be created.

=item B<FailureMin> I<Value>

=item B<WarningMin> I<Value>

Sets the lower bound of acceptable values. If unset defaults to negative
infinity. If a value is less than B<FailureMin> a B<FAILURE> notification will
be created. If the value is less than B<WarningMin> but greater than (or equal
to) B<FailureMin> a B<WARNING> notification will be created.

=item B<Invert> B<true>|B<false>

If set to B<true> the range of acceptable values is inverted, i.E<nbsp>e.
values between B<FailureMin> and B<FailureMax> (B<WarningMin> and
B<WarningMax>) are not okay. Defaults to B<false>.

=item B<Persist> B<true>|B<false>

Sets how often notifications are generated. If set to B<true> one notification
will be generated for each value that is out of the acceptable range. If set to
B<false> (the default) then a notification is only generated if a value is out
of range but the previous value was okay.

This applies to missing values, too: If set to B<true> a notification about a
missing value is generated once every B<Interval> seconds. If set to B<false>
only one such notification is generated until the value appears again.

=back

=head1 SEE ALSO

L<collectd(1)>,
L<collectd-exec(5)>,
L<collectd-perl(5)>,
L<collectd-unixsock(5)>,
L<types.db(5)>,
L<hddtemp(8)>,
L<kstat(3KSTAT)>,
L<mbmon(1)>,
L<rrdtool(1)>,
L<sensors(1)>

=head1 AUTHOR

Florian Forster E<lt>octo@verplant.orgE<gt>

=cut
