.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "COLLECTD.CONF 5"
.TH COLLECTD.CONF 5 "2008-07-15" "4.4.2" "collectd"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
collectd.conf \- Configuration for the system statistics collection daemon \fBcollectd\fR
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  BaseDir "/path/to/data/"
\&  PIDFile "/path/to/pidfile/collectd.pid"
\&  Server  "123.123.123.123" 12345
\&
\&  LoadPlugin cpu
\&  LoadPlugin load
\&  LoadPlugin ping
\&
\&  <Plugin ping>
\&    Host "example.org"
\&    Host "provider.net"
\&  </Plugin>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This config file controls how the system statistics collection daemon
\&\fBcollectd\fR behaves. The most significant option is \fBLoadPlugin\fR, which
controls which plugins to load. These plugins ultimately define collectd's
behavior.
.PP
The syntax of this config file is similar to the config file of the famous
\&\fBApache Webserver\fR. Each line contains either a key-value-pair or a
section-start or \-end. Empty lines and everything after the hash-symbol `#' is
ignored. Values are either string, enclosed in double-quotes,
(floating\-point\-)numbers or a boolean expression, i.\ e. either \fBtrue\fR or
\&\fBfalse\fR. String containing of only alphanumeric characters and underscores do
not need to be quoted.
.PP
The configuration is read and processed in order, i.\ e. from top to
bottom. So the plugins are loaded in the order listed in this config file. It
is a good idea to load any logging plugins first in order to catch messages
from plugins during configuration. Also, the \f(CW\*(C`LoadPlugin\*(C'\fR option \fBmust\fR occur
\&\fBbefore\fR the \f(CW\*(C`<Plugin ...>\*(C'\fR block.
.SH "GLOBAL OPTIONS"
.IX Header "GLOBAL OPTIONS"
.IP "\fBBaseDir\fR \fIDirectory\fR" 4
.IX Item "BaseDir Directory"
Sets the base directory. This is the directory beneath all RRD-files are
created. Possibly more subdirectories are created. This is also the working
directory for the daemon.
.IP "\fBLoadPlugin\fR \fIPlugin\fR" 4
.IX Item "LoadPlugin Plugin"
Loads the plugin \fIPlugin\fR. There must be at least one such line or \fBcollectd\fR
will be mostly useless.
.IP "\fBInclude\fR \fIPath\fR" 4
.IX Item "Include Path"
If \fIPath\fR points to a file, includes that file. If \fIPath\fR points to a
directory, recursively includes all files within that directory and its
subdirectories. If the \f(CW\*(C`wordexp\*(C'\fR function is available on your system,
shell-like wildcards are expanded before files are included. This means you can
use statements like the following:
.Sp
.Vb 1
\&  Include "/etc/collectd.d/*.conf"
.Ve
.Sp
If more than one files are included by a single \fBInclude\fR option, the files
will be included in lexicographical order (as defined by the \f(CW\*(C`strcmp\*(C'\fR
function). Thus, you can e.\ g. use numbered prefixes to specify the
order in which the files are loaded.
.Sp
To prevent loops and shooting yourself in the foot in interesting ways the
nesting is limited to a depth of 8\ levels, which should be sufficient for
most uses. Since symlinks are followed it is still possible to crash the daemon
by looping symlinks. In our opinion significant stupidity should result in an
appropriate amount of pain.
.Sp
It is no problem to have a block like \f(CW\*(C`<Plugin foo>\*(C'\fR in more than one
file, but you cannot include files from within blocks.
.IP "\fBPIDFile\fR \fIFile\fR" 4
.IX Item "PIDFile File"
Sets where to write the \s-1PID\s0 file to. This file is overwritten when it exists
and deleted when the program is stopped. Some init-scripts might override this
setting using the \fB\-P\fR command-line option.
.IP "\fBPluginDir\fR \fIDirectory\fR" 4
.IX Item "PluginDir Directory"
Path to the plugins (shared objects) of collectd.
.IP "\fBTypesDB\fR \fIFile\fR [\fIFile\fR ...]" 4
.IX Item "TypesDB File [File ...]"
Set one or more files that contain the data-set descriptions. See
\&\fItypes.db\fR\|(5) for a description of the format of this file.
.IP "\fBInterval\fR \fISeconds\fR" 4
.IX Item "Interval Seconds"
Configures the interval in which to query the read plugins. Obviously smaller
values lead to a higher system load produced by collectd, while higher values
lead to more coarse statistics.
.IP "\fBReadThreads\fR \fINum\fR" 4
.IX Item "ReadThreads Num"
Number of threads to start for reading plugins. The default value is \fB5\fR, but
you may want to increase this if you have more than five plugins that take a
long time to read. Mostly those are plugin that do network-IO. Setting this to
a value higher than the number of plugins you've loaded is totally useless.
.IP "\fBHostname\fR \fIName\fR" 4
.IX Item "Hostname Name"
Sets the hostname that identifies a host. If you omit this setting, the
hostname will be determinded using the \fIgethostname\fR\|(2) system call.
.IP "\fBFQDNLookup\fR \fBtrue|false\fR" 4
.IX Item "FQDNLookup true|false"
If \fBHostname\fR is determined automatically this setting controls whether or not
the daemon should try to figure out the \*(L"fully qualified domain name\*(R", \s-1FQDN\s0.
This is done using a lookup of the name returned by \f(CW\*(C`gethostname\*(C'\fR.
.Sp
Using this feature (i.\ e. setting this option to \fBtrue\fR) is recommended.
However, to preserve backwards compatibility the default is set to \fBfalse\fR.
The sample config file that is installed with \f(CW\*(C`make\ install\*(C'\fR includes a
line which sets this option, though, so that default installations will have
this setting enabled.
.SH "PLUGIN OPTIONS"
.IX Header "PLUGIN OPTIONS"
Some plugins may register own options. These options must be enclosed in a
\&\f(CW\*(C`Plugin\*(C'\fR\-Section. Which options exist depends on the plugin used. Some plugins
require external configuration, too. The \f(CW\*(C`apache plugin\*(C'\fR, for example,
required \f(CW\*(C`mod_status\*(C'\fR to be configured in the webserver you're going to
collect data from. These plugins are listed below as well, even if they don't
require any configuration within collectd's configfile.
.PP
A list of all plugins and a short summary for each plugin can be found in the
\&\fI\s-1README\s0\fR file shipped with the sourcecode and hopefully binary packets as
well.
.ie n .Sh "Plugin ""apache"""
.el .Sh "Plugin \f(CWapache\fP"
.IX Subsection "Plugin apache"
To configure the \f(CW\*(C`apache\*(C'\fR\-plugin you first need to configure the Apache
webserver correctly. The Apache-plugin \f(CW\*(C`mod_status\*(C'\fR needs to be loaded and
working and the \f(CW\*(C`ExtendedStatus\*(C'\fR directive needs to be \fBenabled\fR. You can use
the following snipped to base your Apache config upon:
.PP
.Vb 6
\&  ExtendedStatus on
\&  <IfModule mod_status.c>
\&    <Location /mod_status>
\&      SetHandler server\-status
\&    </Location>
\&  </IfModule>
.Ve
.PP
Since its \f(CW\*(C`mod_status\*(C'\fR module is very similar to Apache's, \fBlighttpd\fR is
also supported. It introduces a new field, called \f(CW\*(C`BusyServers\*(C'\fR, to count the
number of currently connected clients. This field is also supported.
.PP
The following options are accepted by the \f(CW\*(C`apache\*(C'\fR\-plugin:
.IP "\fB\s-1URL\s0\fR \fIhttp://host/mod_status?auto\fR" 4
.IX Item "URL http://host/mod_status?auto"
Sets the \s-1URL\s0 of the \f(CW\*(C`mod_status\*(C'\fR output. This needs to be the output generated
by \f(CW\*(C`ExtendedStatus on\*(C'\fR and it needs to be the machine readable output
generated by appending the \f(CW\*(C`?auto\*(C'\fR argument.
.IP "\fBUser\fR \fIUsername\fR" 4
.IX Item "User Username"
Optional user name needed for authentication.
.IP "\fBPassword\fR \fIPassword\fR" 4
.IX Item "Password Password"
Optional password needed for authentication.
.IP "\fBVerifyPeer\fR \fBtrue|false\fR" 4
.IX Item "VerifyPeer true|false"
Enable or disable peer \s-1SSL\s0 certificate verification. See
<http://curl.haxx.se/docs/sslcerts.html> for details. Enabled by default.
.IP "\fBVerifyHost\fR \fBtrue|false\fR" 4
.IX Item "VerifyHost true|false"
Enable or disable peer host name verification. If enabled, the plugin checks
if the \f(CW\*(C`Common Name\*(C'\fR or a \f(CW\*(C`Subject Alternate Name\*(C'\fR field of the \s-1SSL\s0
certificate matches the host name provided by the \fB\s-1URL\s0\fR option. If this
identity check fails, the connection is aborted. Obviously, only works when
connecting to a \s-1SSL\s0 enabled server. Enabled by default.
.IP "\fBCACert\fR \fIFile\fR" 4
.IX Item "CACert File"
File that holds one or more \s-1SSL\s0 certificates. If you want to use \s-1HTTPS\s0 you will
possibly need this option. What \s-1CA\s0 certificates come bundled with \f(CW\*(C`libcurl\*(C'\fR
and are checked by default depends on the distribution you use.
.ie n .Sh "Plugin ""apcups"""
.el .Sh "Plugin \f(CWapcups\fP"
.IX Subsection "Plugin apcups"
.IP "\fBHost\fR \fIHostname\fR" 4
.IX Item "Host Hostname"
Hostname of the host running \fBapcupsd\fR. Defaults to \fBlocalhost\fR. Please note
that IPv6 support has been disabled unless someone can confirm or decline that
\&\fBapcupsd\fR can handle it.
.IP "\fBPort\fR \fIPort\fR" 4
.IX Item "Port Port"
TCP-Port to connect to. Defaults to \fB3551\fR.
.ie n .Sh "Plugin ""ascent"""
.el .Sh "Plugin \f(CWascent\fP"
.IX Subsection "Plugin ascent"
This plugin collects information about an Ascent server, a free server for the
\&\*(L"World of Warcraft\*(R" game. This plugin gathers the information by fetching the
\&\s-1XML\s0 status page using \f(CW\*(C`libcurl\*(C'\fR and parses it using \f(CW\*(C`libxml2\*(C'\fR.
.PP
The configuration options are the same as for the \f(CW\*(C`apache\*(C'\fR plugin above:
.IP "\fB\s-1URL\s0\fR \fIhttp://localhost/ascent/status/\fR" 4
.IX Item "URL http://localhost/ascent/status/"
Sets the \s-1URL\s0 of the \s-1XML\s0 status output.
.IP "\fBUser\fR \fIUsername\fR" 4
.IX Item "User Username"
Optional user name needed for authentication.
.IP "\fBPassword\fR \fIPassword\fR" 4
.IX Item "Password Password"
Optional password needed for authentication.
.IP "\fBCACert\fR \fIFile\fR" 4
.IX Item "CACert File"
File that holds one or more \s-1SSL\s0 certificates. If you want to use \s-1HTTPS\s0 you will
possibly need this option. What \s-1CA\s0 certificates come bundled with \f(CW\*(C`libcurl\*(C'\fR
and are checked by default depends on the distribution you use.
.ie n .Sh "Plugin ""cpufreq"""
.el .Sh "Plugin \f(CWcpufreq\fP"
.IX Subsection "Plugin cpufreq"
This plugin doesn't have any options. It reads
\&\fI/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq\fR (for the first \s-1CPU\s0
installed) to get the current \s-1CPU\s0 frequency. If this file does not exist make
sure \fBcpufreqd\fR (<http://cpufreqd.sourceforge.net/>) or a similar tool is
installed and an \*(L"cpu governor\*(R" (that's a kernel module) is loaded.
.ie n .Sh "Plugin ""csv"""
.el .Sh "Plugin \f(CWcsv\fP"
.IX Subsection "Plugin csv"
.IP "\fBDataDir\fR \fIDirectory\fR" 4
.IX Item "DataDir Directory"
Set the directory to store CSV-files under. Per default CSV-files are generated
beneath the daemon's working directory, i.\ e. the \fBBaseDir\fR.
.IP "\fBStoreRates\fR \fBtrue|false\fR" 4
.IX Item "StoreRates true|false"
If set to \fBtrue\fR, convert counter values to rates. If set to \fBfalse\fR (the
default) counter values are stored as is, i.\ e. as an increasing integer
number.
.ie n .Sh "Plugin ""df"""
.el .Sh "Plugin \f(CWdf\fP"
.IX Subsection "Plugin df"
.IP "\fBDevice\fR \fIDevice\fR" 4
.IX Item "Device Device"
Select partitions based on the devicename.
.IP "\fBMountPoint\fR \fIDirectory\fR" 4
.IX Item "MountPoint Directory"
Select partitions based on the mountpoint.
.IP "\fBFSType\fR \fIFSType\fR" 4
.IX Item "FSType FSType"
Select partitions based on the filesystem type.
.IP "\fBIgnoreSelected\fR \fItrue\fR|\fIfalse\fR" 4
.IX Item "IgnoreSelected true|false"
Invert the selection: If set to true, all partitions \fBexcept\fR the ones that
match any one of the criteria are collected. By default only selected
partitions are collected if a selection is made. If no selection is configured
at all, \fBall\fR partitions are selected.
.ie n .Sh "Plugin ""disk"""
.el .Sh "Plugin \f(CWdisk\fP"
.IX Subsection "Plugin disk"
The \f(CW\*(C`disk\*(C'\fR plugin collects information about the usage of physical disks and
logical disks (partitions). Values collected are the number of octets written
to and read from a disk or partition, the number of read/write operations
issued to the disk and a rather complex \*(L"time\*(R" it took for these commands to be
issued.
.PP
Using the following two options you can ignore some disks or configure the
collection only of specific disks.
.IP "\fBDisk\fR \fIName\fR" 4
.IX Item "Disk Name"
Select the disk \fIName\fR. Whether it is collected or ignored depends on the
\&\fBIgnoreSelected\fR setting, see below. As with other plugins that use the
daemon's ignorelist functionality, a string that starts and ends with a slash
is interpreted as a regular expression. Examples:
.Sp
.Vb 2
\&  Disk "sdd"
\&  Disk "/hda[34]/"
.Ve
.IP "\fBIgnoreSelected\fR \fBtrue\fR|\fBfalse\fR" 4
.IX Item "IgnoreSelected true|false"
Sets whether selected disks, i.\ e. the ones matches by any of the \fBDisk\fR
statements, are ignored or if all other disks are ignored. The behavior
(hopefully) is intuitive: If no \fBDisk\fR option is configured, all disks are
collected. If at least one \fBDisk\fR option is given and no \fBIgnoreSelected\fR or
set to \fBfalse\fR, \fBonly\fR matching disks will be collected. If \fBIgnoreSelected\fR
is set to \fBtrue\fR, all disks are collected \fBexcept\fR the ones matched.
.ie n .Sh "Plugin ""dns"""
.el .Sh "Plugin \f(CWdns\fP"
.IX Subsection "Plugin dns"
.IP "\fBInterface\fR \fIInterface\fR" 4
.IX Item "Interface Interface"
The dns plugin uses \fBlibpcap\fR to capture dns traffic and analyses it. This
option sets the interface that should be used. If this option is not set, or
set to \*(L"any\*(R", the plugin will try to get packets from \fBall\fR interfaces. This
may not work on certain platforms, such as Mac\ \s-1OS\s0\ X.
.IP "\fBIgnoreSource\fR \fIIP-address\fR" 4
.IX Item "IgnoreSource IP-address"
Ignore packets that originate from this address.
.ie n .Sh "Plugin ""email"""
.el .Sh "Plugin \f(CWemail\fP"
.IX Subsection "Plugin email"
.IP "\fBSocketFile\fR \fIPath\fR" 4
.IX Item "SocketFile Path"
Sets the socket-file which is to be created.
.IP "\fBSocketGroup\fR \fIGroup\fR" 4
.IX Item "SocketGroup Group"
If running as root change the group of the UNIX-socket after it has been
created. Defaults to \fBcollectd\fR.
.IP "\fBSocketPerms\fR \fIPermissions\fR" 4
.IX Item "SocketPerms Permissions"
Change the file permissions of the UNIX-socket after it has been created. The
permissions must be given as a numeric, octal value as you would pass to
\&\fIchmod\fR\|(1). Defaults to \fB0770\fR.
.IP "\fBMaxConns\fR \fINumber\fR" 4
.IX Item "MaxConns Number"
Sets the maximum number of connections that can be handled in parallel. Since
this many threads will be started immediately setting this to a very high
value will waste valuable resources. Defaults to \fB5\fR and will be forced to be
at most \fB16384\fR to prevent typos and dumb mistakes.
.ie n .Sh "Plugin ""exec"""
.el .Sh "Plugin \f(CWexec\fP"
.IX Subsection "Plugin exec"
Please make sure to read \fIcollectd\-exec\fR\|(5) before using this plugin. It
contains valuable information on when the executable is executed and the
output that is expected from it.
.IP "\fBExec\fR \fIUser\fR[:[\fIGroup\fR]] \fIExecutable\fR [\fI<arg>\fR [\fI<arg>\fR ...]]" 4
.IX Item "Exec User[:[Group]] Executable [<arg> [<arg> ...]]"
.PD 0
.IP "\fBNotificationExec\fR \fIUser\fR[:[\fIGroup\fR]] \fIExecutable\fR [\fI<arg>\fR [\fI<arg>\fR ...]]" 4
.IX Item "NotificationExec User[:[Group]] Executable [<arg> [<arg> ...]]"
.PD
Execute the executable \fIExecutable\fR as user \fIUser\fR. If the user name is
followed by a colon and a group name, the effective group is set to that group.
The real group and saved-set group will be set to the default group of that
user. If no group is given the effective group \s-1ID\s0 will be the same as the real
group \s-1ID\s0.
.Sp
Please note that in order to change the user and/or group the daemon needs
superuser privileges. If the daemon is run as an unprivileged user you must
specify the same user/group here. If the daemon is run with superuser
privileges, you must supply a non-root user here.
.Sp
The executable may be followed by optional arguments that are passed to the
program. Please note that due to the configuration parsing numbers and boolean
values may be changed. If you want to be absolutely sure that something is
passed as-is please enclose it in quotes.
.Sp
The \fBExec\fR and \fBNotificationExec\fR statements change the semantics of the
programs executed, i.\ e. the data passed to them and the response
expected from them. This is documented in great detail in \fIcollectd\-exec\fR\|(5).
.ie n .Sh "Plugin ""hddtemp"""
.el .Sh "Plugin \f(CWhddtemp\fP"
.IX Subsection "Plugin hddtemp"
To get values from \fBhddtemp\fR collectd connects to \fBlocalhost\fR (127.0.0.1),
port \fB7634/tcp\fR. The \fBHost\fR and \fBPort\fR options can be used to change these
default values, see below. \f(CW\*(C`hddtemp\*(C'\fR has to be running to work correctly. If
\&\f(CW\*(C`hddtemp\*(C'\fR is not running timeouts may appear which may interfere with other
statistics..
.PP
The \fBhddtemp\fR homepage can be found at
<http://www.guzu.net/linux/hddtemp.php>.
.IP "\fBHost\fR \fIHostname\fR" 4
.IX Item "Host Hostname"
Hostname to connect to. Defaults to \fB127.0.0.1\fR.
.IP "\fBPort\fR \fIPort\fR" 4
.IX Item "Port Port"
TCP-Port to connect to. Defaults to \fB7634\fR.
.IP "\fBTranslateDevicename\fR \fItrue\fR|\fIfalse\fR" 4
.IX Item "TranslateDevicename true|false"
If enabled, translate the disk names to major/minor device numbers
(e.\ g. \*(L"8\-0\*(R" for /dev/sda). For backwards compatibility this defaults to
\&\fItrue\fR but it's recommended to disable it as it will probably be removed in
the next major version.
.ie n .Sh "Plugin ""interface"""
.el .Sh "Plugin \f(CWinterface\fP"
.IX Subsection "Plugin interface"
.IP "\fBInterface\fR \fIInterface\fR" 4
.IX Item "Interface Interface"
Select this interface. By default these interfaces will then be collected. For
a more detailed description see \fBIgnoreSelected\fR below.
.IP "\fBIgnoreSelected\fR \fItrue\fR|\fIfalse\fR" 4
.IX Item "IgnoreSelected true|false"
If no configuration if given, the \fBtraffic\fR\-plugin will collect data from
all interfaces. This may not be practical, especially for loopback\- and
similar interfaces. Thus, you can use the \fBInterface\fR\-option to pick the
interfaces you're interested in. Sometimes, however, it's easier/preferred
to collect all interfaces \fIexcept\fR a few ones. This option enables you to
do that: By setting \fBIgnoreSelected\fR to \fItrue\fR the effect of
\&\fBInterface\fR is inversed: All selected interfaces are ignored and all
other interfaces are collected.
.ie n .Sh "Plugin ""iptables"""
.el .Sh "Plugin \f(CWiptables\fP"
.IX Subsection "Plugin iptables"
.IP "\fBChain\fR \fITable\fR \fIChain\fR [\fIComment|Number\fR [\fIName\fR]]" 4
.IX Item "Chain Table Chain [Comment|Number [Name]]"
Select the rules to count. If only \fITable\fR and \fIChain\fR are given, this plugin
will collect the counters of all rules which have a comment-match. The comment
is then used as type-instance.
.Sp
If \fIComment\fR or \fINumber\fR is given, only the rule with the matching comment or
the \fIn\fRth rule will be collected. Again, the comment (or the number) will be
used as the type-instance.
.Sp
If \fIName\fR is supplied, it will be used as the type-instance instead of the
comment or the number.
.ie n .Sh "Plugin ""irq"""
.el .Sh "Plugin \f(CWirq\fP"
.IX Subsection "Plugin irq"
.IP "\fBIrq\fR \fIIrq\fR" 4
.IX Item "Irq Irq"
Select this irq. By default these irqs will then be collected. For a more
detailed description see \fBIgnoreSelected\fR below.
.IP "\fBIgnoreSelected\fR \fItrue\fR|\fIfalse\fR" 4
.IX Item "IgnoreSelected true|false"
If no configuration if given, the \fBirq\fR\-plugin will collect data from all
irqs. This may not be practical, especially if no interrupts happen. Thus, you
can use the \fBIrq\fR\-option to pick the interrupt you're interested in.
Sometimes, however, it's easier/preferred to collect all interrupts \fIexcept\fR a
few ones. This option enables you to do that: By setting \fBIgnoreSelected\fR to
\&\fItrue\fR the effect of \fBIrq\fR is inversed: All selected interrupts are ignored
and all other interrupts are collected.
.ie n .Sh "Plugin ""libvirt"""
.el .Sh "Plugin \f(CWlibvirt\fP"
.IX Subsection "Plugin libvirt"
This plugin allows \s-1CPU\s0, disk and network load to be collected for virtualized
guests on the machine. This means that these characteristics can be collected
for guest systems without installing any software on them \- collectd only runs
on the hosting system. The statistics are collected through libvirt
(<http://libvirt.org/>).
.PP
Only \fIConnection\fR is required.
.IP "\fBConnection\fR \fIuri\fR" 4
.IX Item "Connection uri"
Connect to the hypervisor given by \fIuri\fR. For example if using Xen use:
.Sp
.Vb 1
\& Connection "xen:///"
.Ve
.Sp
Details which URIs allowed are given at <http://libvirt.org/uri.html>.
.IP "\fBRefreshInterval\fR \fIseconds\fR" 4
.IX Item "RefreshInterval seconds"
Refresh the list of domains and devices every \fIseconds\fR. The default is 60
seconds. Setting this to be the same or smaller than the \fIInterval\fR will cause
the list of domains and devices to be refreshed on every iteration.
.Sp
Refreshing the devices in particular is quite a costly operation, so if your
virtualization setup is static you might consider increasing this. If this
option is set to 0, refreshing is disabled completely.
.IP "\fBDomain\fR \fIname\fR" 4
.IX Item "Domain name"
.PD 0
.IP "\fBBlockDevice\fR \fIname:dev\fR" 4
.IX Item "BlockDevice name:dev"
.IP "\fBInterfaceDevice\fR \fIname:dev\fR" 4
.IX Item "InterfaceDevice name:dev"
.IP "\fBIgnoreSelected\fR \fItrue\fR|\fIfalse\fR" 4
.IX Item "IgnoreSelected true|false"
.PD
Select which domains and devices are collected.
.Sp
If \fIIgnoreSelected\fR is not given or \fIfalse\fR then only the listed domains and
disk/network devices are collected.
.Sp
If \fIIgnoreSelected\fR is \fItrue\fR then the test is reversed and the listed
domains and disk/network devices are ignored, while the rest are collected.
.Sp
The domain name and device names may use a regular expression, if the name is
surrounded by \fI/.../\fR and collectd was compiled with support for regexps.
.Sp
The default is to collect statistics for all domains and all their devices.
.Sp
Example:
.Sp
.Vb 2
\& BlockDevice "/:hdb/"
\& IgnoreSelected "true"
.Ve
.Sp
Ignore all \fIhdb\fR devices on any domain, but other block devices (eg. \fIhda\fR)
will be collected.
.IP "\fBHostnameFormat\fR \fBname|uuid|hostname|...\fR" 4
.IX Item "HostnameFormat name|uuid|hostname|..."
When the libvirt plugin logs data, it sets the hostname of the collected data
according to this setting. The default is to use the guest name as provided by
the hypervisor, which is equal to setting \fBname\fR.
.Sp
\&\fBuuid\fR means use the guest's \s-1UUID\s0. This is useful if you want to track the
same guest across migrations.
.Sp
\&\fBhostname\fR means to use the global \fBHostname\fR setting, which is probably not
useful on its own because all guests will appear to have the same name.
.Sp
You can also specify combinations of these fields. For example \fBname uuid\fR
means to concatenate the guest name and \s-1UUID\s0 (with a literal colon character
between, thus \fI\*(L"foo:1234\-1234\-1234\-1234\*(R"\fR).
.ie n .Sh "Plugin ""logfile"""
.el .Sh "Plugin \f(CWlogfile\fP"
.IX Subsection "Plugin logfile"
.IP "\fBLogLevel\fR \fBdebug|info|notice|warning|err\fR" 4
.IX Item "LogLevel debug|info|notice|warning|err"
Sets the log-level. If, for example, set to \fBnotice\fR, then all events with
severity \fBnotice\fR, \fBwarning\fR, or \fBerr\fR will be written to the logfile.
.Sp
Please note that \fBdebug\fR is only available if collectd has been compiled with
debugging support.
.IP "\fBFile\fR \fIFile\fR" 4
.IX Item "File File"
Sets the file to write log messages to. The special strings \fBstdout\fR and
\&\fBstderr\fR can be used to write to the standard output and standard error
channels, respectively. This, of course, only makes much sense when collectd is
running in foreground\- or non-daemon-mode.
.IP "\fBTimestamp\fR \fBtrue\fR|\fBfalse\fR" 4
.IX Item "Timestamp true|false"
Prefix all lines printed by the current time. Defaults to \fBtrue\fR.
.ie n .Sh "Plugin ""mbmon"""
.el .Sh "Plugin \f(CWmbmon\fP"
.IX Subsection "Plugin mbmon"
The \f(CW\*(C`mbmon plugin\*(C'\fR uses mbmon to retrieve temperature, voltage, etc.
.PP
Be default collectd connects to \fBlocalhost\fR (127.0.0.1), port \fB411/tcp\fR. The
\&\fBHost\fR and \fBPort\fR options can be used to change these values, see below.
\&\f(CW\*(C`mbmon\*(C'\fR has to be running to work correctly. If \f(CW\*(C`mbmon\*(C'\fR is not running
timeouts may appear which may interfere with other statistics..
.PP
\&\f(CW\*(C`mbmon\*(C'\fR must be run with the \-r option (\*(L"print \s-1TAG\s0 and Value format\*(R");
Debian's \fI/etc/init.d/mbmon\fR script already does this, other people
will need to ensure that this is the case.
.IP "\fBHost\fR \fIHostname\fR" 4
.IX Item "Host Hostname"
Hostname to connect to. Defaults to \fB127.0.0.1\fR.
.IP "\fBPort\fR \fIPort\fR" 4
.IX Item "Port Port"
TCP-Port to connect to. Defaults to \fB411\fR.
.ie n .Sh "Plugin ""memcached"""
.el .Sh "Plugin \f(CWmemcached\fP"
.IX Subsection "Plugin memcached"
The \f(CW\*(C`memcached plugin\*(C'\fR connects to a memcached server and queries statistics
about cache utilization, memory and bandwidth used.
<http://www.danga.com/memcached/>
.IP "\fBHost\fR \fIHostname\fR" 4
.IX Item "Host Hostname"
Hostname to connect to. Defaults to \fB127.0.0.1\fR.
.IP "\fBPort\fR \fIPort\fR" 4
.IX Item "Port Port"
TCP-Port to connect to. Defaults to \fB11211\fR.
.ie n .Sh "Plugin ""mysql"""
.el .Sh "Plugin \f(CWmysql\fP"
.IX Subsection "Plugin mysql"
The \f(CW\*(C`mysql plugin\*(C'\fR requires \fBmysqlclient\fR to be installed. It connects to the
database when started and keeps the connection up as long as possible. When the
connection is interrupted for whatever reason it will try to re-connect. The
plugin will complaint loudly in case anything goes wrong.
.PP
This plugin issues \f(CW\*(C`SHOW STATUS\*(C'\fR and evaluates \f(CW\*(C`Bytes_{received,sent}\*(C'\fR,
\&\f(CW\*(C`Com_*\*(C'\fR and \f(CW\*(C`Handler_*\*(C'\fR which correspond to \fImysql_octets.rrd\fR,
\&\fImysql_commands\-*.rrd\fR and \fImysql_handler\-*.rrd\fR. Also, the values of
\&\f(CW\*(C`Qcache_*\*(C'\fR are put in \fImysql_qcache.rrd\fR and values of \f(CW\*(C`Threads_*\*(C'\fR are put
in \fImysql_threads.rrd\fR. Please refer to the \fBMySQL reference manual\fR,
\&\fI5.2.4. Server Status Variables\fR for an explanation of these values.
.PP
Use the following options to configure the plugin:
.IP "\fBHost\fR \fIHostname\fR" 4
.IX Item "Host Hostname"
Hostname of the database server. Defaults to \fBlocalhost\fR.
.IP "\fBUser\fR \fIUsername\fR" 4
.IX Item "User Username"
Username to use when connecting to the database.
.IP "\fBPassword\fR \fIPassword\fR" 4
.IX Item "Password Password"
Password needed to log into the database.
.IP "\fBDatabase\fR \fIDatabase\fR" 4
.IX Item "Database Database"
Select this database. Defaults to \fIno database\fR which is a perfectly reasonable
option for what this plugin does.
.ie n .Sh "Plugin ""netlink"""
.el .Sh "Plugin \f(CWnetlink\fP"
.IX Subsection "Plugin netlink"
The \f(CW\*(C`netlink\*(C'\fR plugin uses a netlink socket to query the Linux kernel about
statistics of various interface and routing aspects.
.IP "\fBInterface\fR \fIInterface\fR" 4
.IX Item "Interface Interface"
.PD 0
.IP "\fBVerboseInterface\fR \fIInterface\fR" 4
.IX Item "VerboseInterface Interface"
.PD
Instruct the plugin to collect interface statistics. This is basically the same
as the statistics provided by the \f(CW\*(C`interface\*(C'\fR plugin (see above) but
potentially much more detailed.
.Sp
When configuring with \fBInterface\fR only the basic statistics will be collected,
namely octets, packets, and errors. These statistics are collected by
the \f(CW\*(C`interface\*(C'\fR plugin, too, so using both at the same time is no benefit.
.Sp
When configured with \fBVerboseInterface\fR all counters \fBexcept\fR the basic ones,
so that no data needs to be collected twice if you use the \f(CW\*(C`interface\*(C'\fR plugin.
This includes dropped packets, received multicast packets, collisions and a
whole zoo of differentiated \s-1RX\s0 and \s-1TX\s0 errors. You can try the following command
to get an idea of what awaits you:
.Sp
.Vb 1
\&  ip \-s \-s link list
.Ve
.Sp
If \fIInterface\fR is \fBAll\fR, all interfaces will be selected.
.IP "\fBQDisc\fR \fIInterface\fR [\fIQDisc\fR]" 4
.IX Item "QDisc Interface [QDisc]"
.PD 0
.IP "\fBClass\fR \fIInterface\fR [\fIClass\fR]" 4
.IX Item "Class Interface [Class]"
.IP "\fBFilter\fR \fIInterface\fR [\fIFilter\fR]" 4
.IX Item "Filter Interface [Filter]"
.PD
Collect the octets and packets that pass a certain qdisc, class or filter.
.Sp
QDiscs and classes are identified by their type and handle (or classid).
Filters don't necessarily have a handle, therefore the parent's handle is used.
The notation used in collectd differs from that used in \fItc\fR\|(1) in that it
doesn't skip the major or minor number if it's zero and doesn't print special
ids by their name. So, for example, a qdisc may be identified by
\&\f(CW\*(C`pfifo_fast\-1:0\*(C'\fR even though the minor number of \fBall\fR qdiscs is zero and
thus not displayed by \fItc\fR\|(1).
.Sp
If \fBQDisc\fR, \fBClass\fR, or \fBFilter\fR is given without the second argument,
i.\ .e. without an identifier, all qdiscs, classes, or filters that are
associated with that interface will be collected.
.Sp
Since a filter itself doesn't necessarily have a handle, the parent's handle is
used. This may lead to problems when more than one filter is attached to a
qdisc or class. This isn't nice, but we don't know how this could be done any
better. If you have a idea, please don't hesitate to tell us.
.Sp
As with the \fBInterface\fR option you can specify \fBAll\fR as the interface,
meaning all interfaces.
.Sp
Here are some examples to help you understand the above text more easily:
.Sp
.Vb 7
\&  <Plugin netlink>
\&    VerboseInterface "All"
\&    QDisc "eth0" "pfifo_fast\-1:0"
\&    QDisc "ppp0"
\&    Class "ppp0" "htb\-1:10"
\&    Filter "ppp0" "u32\-1:0"
\&  </Plugin>
.Ve
.IP "\fBIgnoreSelected\fR" 4
.IX Item "IgnoreSelected"
The behaviour is the same as with all other similar plugins: If nothing is
selected at all, everything is collected. If some things are selected using the
options described above, only these statistics are collected. If you set
\&\fBIgnoreSelected\fR to \fBtrue\fR, this behavior is inversed, i.\ e. the
specified statistics will not be collected.
.ie n .Sh "Plugin ""network"""
.el .Sh "Plugin \f(CWnetwork\fP"
.IX Subsection "Plugin network"
.IP "\fBListen\fR \fIHost\fR [\fIPort\fR]" 4
.IX Item "Listen Host [Port]"
.PD 0
.IP "\fBServer\fR \fIHost\fR [\fIPort\fR]" 4
.IX Item "Server Host [Port]"
.PD
The \fBServer\fR statement sets the server to send datagrams \fBto\fR.  The statement
may occur multiple times to send each datagram to multiple destinations.
.Sp
The \fBListen\fR statement sets the interfaces to bind to. When multiple
statements are found the daemon will bind to multiple interfaces.
.Sp
The argument \fIHost\fR may be a hostname, an IPv4 address or an IPv6 address. If
the argument is a multicast address the daemon will join that multicast group.
.Sp
If no \fBListen\fR statement is found the server tries join both, the default IPv6
multicast group and the default IPv4 multicast group. If no \fBServer\fR statement
is found the client will try to send data to the IPv6 multicast group first. If
that fails the client will try the IPv4 multicast group.
.Sp
The default IPv6 multicast group is \f(CW\*(C`ff18::efc0:4a42\*(C'\fR. The default IPv4
multicast group is \f(CW239.192.74.66\fR.
.Sp
The optional \fIPort\fR argument sets the port to use. It can either be given
using a numeric port number or a service name. If the argument is omitted the
default port \fB25826\fR is assumed.
.IP "\fBTimeToLive\fR \fI1\-255\fR" 4
.IX Item "TimeToLive 1-255"
Set the time-to-live of sent packets. This applies to all, unicast and
multicast, and IPv4 and IPv6 packets. The default is to not change this value.
That means that multicast packets will be sent with a \s-1TTL\s0 of \f(CW1\fR (one) on most
operating systems.
.IP "\fBForward\fR \fItrue|false\fR" 4
.IX Item "Forward true|false"
If set to \fItrue\fR, write packets that were received via the network plugin to
the sending sockets. This should only be activated when the \fBListen\fR\- and
\&\fBServer\fR\-statements differ. Otherwise packets may be send multiple times to
the same multicast group. While this results in more network traffic than
necessary it's not a huge problem since the plugin has a duplicate detection,
so the values will not loop.
.IP "\fBCacheFlush\fR \fISeconds\fR" 4
.IX Item "CacheFlush Seconds"
For each host/plugin/type combination the \f(CW\*(C`network plugin\*(C'\fR caches the time of
the last value being sent or received. Every \fISeconds\fR seconds the plugin
searches and removes all entries that are older than \fISeconds\fR seconds, thus
freeing the unused memory again. Since this process is somewhat expensive and
normally doesn't do much, this value should not be too small. The default is
1800 seconds, but setting this to 86400 seconds (one day) will not do much harm
either.
.ie n .Sh "Plugin ""nginx"""
.el .Sh "Plugin \f(CWnginx\fP"
.IX Subsection "Plugin nginx"
This plugin collects the number of connections and requests handled by the
\&\f(CW\*(C`nginx daemon\*(C'\fR (speak: engine\ X), a \s-1HTTP\s0 and mail server/proxy. It
queries the page provided by the \f(CW\*(C`ngx_http_stub_status_module\*(C'\fR module, which
isn't compiled by default. Please refer to
<http://wiki.codemongers.com/NginxStubStatusModule> for more information on
how to compile and configure nginx and this module.
.PP
The following options are accepted by the \f(CW\*(C`nginx plugin\*(C'\fR:
.IP "\fB\s-1URL\s0\fR \fIhttp://host/nginx_status\fR" 4
.IX Item "URL http://host/nginx_status"
Sets the \s-1URL\s0 of the \f(CW\*(C`ngx_http_stub_status_module\*(C'\fR output.
.IP "\fBUser\fR \fIUsername\fR" 4
.IX Item "User Username"
Optional user name needed for authentication.
.IP "\fBPassword\fR \fIPassword\fR" 4
.IX Item "Password Password"
Optional password needed for authentication.
.IP "\fBVerifyPeer\fR \fBtrue|false\fR" 4
.IX Item "VerifyPeer true|false"
Enable or disable peer \s-1SSL\s0 certificate verification. See
<http://curl.haxx.se/docs/sslcerts.html> for details. Enabled by default.
.IP "\fBVerifyHost\fR \fBtrue|false\fR" 4
.IX Item "VerifyHost true|false"
Enable or disable peer host name verification. If enabled, the plugin checks
if the \f(CW\*(C`Common Name\*(C'\fR or a \f(CW\*(C`Subject Alternate Name\*(C'\fR field of the \s-1SSL\s0
certificate matches the host name provided by the \fB\s-1URL\s0\fR option. If this
identity check fails, the connection is aborted. Obviously, only works when
connecting to a \s-1SSL\s0 enabled server. Enabled by default.
.IP "\fBCACert\fR \fIFile\fR" 4
.IX Item "CACert File"
File that holds one or more \s-1SSL\s0 certificates. If you want to use \s-1HTTPS\s0 you will
possibly need this option. What \s-1CA\s0 certificates come bundled with \f(CW\*(C`libcurl\*(C'\fR
and are checked by default depends on the distribution you use.
.ie n .Sh "Plugin ""ntpd"""
.el .Sh "Plugin \f(CWntpd\fP"
.IX Subsection "Plugin ntpd"
.IP "\fBHost\fR \fIHostname\fR" 4
.IX Item "Host Hostname"
Hostname of the host running \fBntpd\fR. Defaults to \fBlocalhost\fR.
.IP "\fBPort\fR \fIPort\fR" 4
.IX Item "Port Port"
UDP-Port to connect to. Defaults to \fB123\fR.
.IP "\fBReverseLookups\fR \fBtrue\fR|\fBfalse\fR" 4
.IX Item "ReverseLookups true|false"
Sets wether or not to perform reverse lookups on peers. Since the name or
IP-address may be used in a filename it is recommended to disable reverse
lookups. The default is to do reverse lookups to preserve backwards
compatibility, though.
.ie n .Sh "Plugin ""nut"""
.el .Sh "Plugin \f(CWnut\fP"
.IX Subsection "Plugin nut"
.IP "\fB\s-1UPS\s0\fR \fIupsname\fR\fB@\fR\fIhostname\fR[\fB:\fR\fIport\fR]" 4
.IX Item "UPS upsname@hostname[:port]"
Add a \s-1UPS\s0 to collect data from. The format is identical to the one accepted by
\&\fIupsc\fR\|(8).
.ie n .Sh "Plugin ""perl"""
.el .Sh "Plugin \f(CWperl\fP"
.IX Subsection "Plugin perl"
This plugin embeds a Perl-interpreter into collectd and provides an interface
to collectd's plugin system. See \fIcollectd\-perl\fR\|(5) for its documentation.
.ie n .Sh "Plugin ""ping"""
.el .Sh "Plugin \f(CWping\fP"
.IX Subsection "Plugin ping"
.IP "\fBHost\fR \fIIP-address\fR" 4
.IX Item "Host IP-address"
Host to ping periodically. This option may be repeated several times to ping
multiple hosts.
.IP "\fB\s-1TTL\s0\fR \fI0\-255\fR" 4
.IX Item "TTL 0-255"
Sets the Time-To-Live of generated \s-1ICMP\s0 packets.
.ie n .Sh "Plugin ""powerdns"""
.el .Sh "Plugin \f(CWpowerdns\fP"
.IX Subsection "Plugin powerdns"
The \f(CW\*(C`powerdns\*(C'\fR plugin queries statistics from an authoritative PowerDNS
nameserver and/or a PowerDNS recursor. Since both offer a wide variety of
values, many of which are probably meaningless to most users, but may be useful
for some. So you may chose which values to collect, but if you don't, some
reasonable defaults will be collected.
.PP
.Vb 10
\&  <Plugin "powerdns">
\&    <Server "server_name">
\&      Collect "latency"
\&      Collect "udp\-answers" "udp\-queries"
\&      Socket "/var/run/pdns.controlsocket"
\&    </Server>
\&    <Recursor "recursor_name">
\&      Collect "questions"
\&      Collect "cache\-hits" "cache\-misses"
\&      Socket "/var/run/pdns_recursor.controlsocket"
\&    </Recursor>
\&    LocalSocket "/opt/collectd/var/run/collectd\-powerdns"
\&  </Plugin>
.Ve
.IP "\fBServer\fR and \fBRecursor\fR block" 4
.IX Item "Server and Recursor block"
The \fBServer\fR block defines one authoritative server to query, the \fBRecursor\fR
does the same for an recursing server. The possible options in both blocks are
the same, though. The argument defines a name for the server\ / recursor
and is required.
.RS 4
.IP "\fBCollect\fR \fIField\fR" 4
.IX Item "Collect Field"
Using the \fBCollect\fR statement you can select which values to collect. Here,
you specify the name of the values as used by the PowerDNS servers, e.\ g.
\&\f(CW\*(C`dlg\-only\-drops\*(C'\fR, \f(CW\*(C`answers10\-100\*(C'\fR.
.Sp
The method of getting the values differs for \fBServer\fR and \fBRecursor\fR blocks:
When querying the server a \f(CW\*(C`SHOW *\*(C'\fR command is issued in any case, because
that's the only way of getting multiple values out of the server at once.
collectd then picks out the values you have selected. When querying the
recursor, a command is generated to query exactly these values. So if you
specify invalid fields when querying the recursor, a syntax error may be
returned by the daemon and collectd may not collect any values at all.
.Sp
If no \fBCollect\fR statement is given, the following \fBServer\fR values will be
collected:
.RS 4
.IP "latency" 4
.IX Item "latency"
.PD 0
.IP "packetcache-hit" 4
.IX Item "packetcache-hit"
.IP "packetcache-miss" 4
.IX Item "packetcache-miss"
.IP "packetcache-size" 4
.IX Item "packetcache-size"
.IP "query-cache-hit" 4
.IX Item "query-cache-hit"
.IP "query-cache-miss" 4
.IX Item "query-cache-miss"
.IP "recursing-answers" 4
.IX Item "recursing-answers"
.IP "recursing-questions" 4
.IX Item "recursing-questions"
.IP "tcp-answers" 4
.IX Item "tcp-answers"
.IP "tcp-queries" 4
.IX Item "tcp-queries"
.IP "udp-answers" 4
.IX Item "udp-answers"
.IP "udp-queries" 4
.IX Item "udp-queries"
.RE
.RS 4
.PD
.Sp
The following \fBRecursor\fR values will be collected by default:
.IP "noerror-answers" 4
.IX Item "noerror-answers"
.PD 0
.IP "nxdomain-answers" 4
.IX Item "nxdomain-answers"
.IP "servfail-answers" 4
.IX Item "servfail-answers"
.IP "sys-msec" 4
.IX Item "sys-msec"
.IP "user-msec" 4
.IX Item "user-msec"
.IP "qa-latency" 4
.IX Item "qa-latency"
.IP "cache-entries" 4
.IX Item "cache-entries"
.IP "cache-hits" 4
.IX Item "cache-hits"
.IP "cache-misses" 4
.IX Item "cache-misses"
.IP "questions" 4
.IX Item "questions"
.RE
.RS 4
.PD
.Sp
Please note that up to that point collectd doesn't know what values are
available on the server and values that are added do not need a change of the
mechanism so far. However, the values must be mapped to collectd's naming
scheme, which is done using a lookup table that lists all known values. If
values are added in the future and collectd does not know about them, you will
get an error much like this:
.Sp
.Vb 1
\&  powerdns plugin: submit: Not found in lookup table: foobar = 42
.Ve
.Sp
In this case please file a bug report with the collectd team.
.RE
.IP "\fBSocket\fR \fIPath\fR" 4
.IX Item "Socket Path"
Configures the path to the \s-1UNIX\s0 domain socket to be used when connecting to the
daemon. By default \f(CW\*(C`/var/run/pdns.controlsocket\*(C'\fR will be used for an
authoritative server and \f(CW\*(C`/var/run/pdns_recursor.controlsocket\*(C'\fR will be used
for the recursor.
.RE
.RS 4
.RE
.IP "\fBLocalSocket\fR \fIPath\fR" 4
.IX Item "LocalSocket Path"
Querying the recursor is done using \s-1UDP\s0. When using \s-1UDP\s0 over \s-1UNIX\s0 domain
sockets, the client socket needs a name in the file system, too. You can set
this local name to \fIPath\fR using the \fBLocalSocket\fR option. The default is
\&\f(CW\*(C`\f(CIprefix\f(CW/var/run/collectd\-powerdns\*(C'\fR.
.ie n .Sh "Plugin ""processes"""
.el .Sh "Plugin \f(CWprocesses\fP"
.IX Subsection "Plugin processes"
.IP "\fBProcess\fR \fIName\fR" 4
.IX Item "Process Name"
Select more detailed statistics of processes matching this name. The statistics
collected for these selected processes are size of the resident segment size
(\s-1RSS\s0), user\- and system-time used, number of processes and number of threads,
and minor and major pagefaults.
.ie n .Sh "Plugin ""rrdtool"""
.el .Sh "Plugin \f(CWrrdtool\fP"
.IX Subsection "Plugin rrdtool"
You can use the settings \fBStepSize\fR, \fBHeartBeat\fR, \fBRRARows\fR, and \fB\s-1XFF\s0\fR to
fine-tune your RRD-files. Please read \fIrrdcreate\fR\|(1) if you encounter problems
using these settings. If you don't want to dive into the depths of RRDTool, you
can safely ignore these settings.
.IP "\fBDataDir\fR \fIDirectory\fR" 4
.IX Item "DataDir Directory"
Set the directory to store RRD-files under. Per default RRD-files are generated
beneath the daemon's working directory, i.\ e. the \fBBaseDir\fR.
.IP "\fBStepSize\fR \fISeconds\fR" 4
.IX Item "StepSize Seconds"
\&\fBForce\fR the stepsize of newly created RRD-files. Ideally (and per default)
this setting is unset and the stepsize is set to the interval in which the data
is collected. Do not use this option unless you absolutely have to for some
reason. Setting this option may cause problems with the \f(CW\*(C`snmp plugin\*(C'\fR, the
\&\f(CW\*(C`exec plugin\*(C'\fR or when the daemon is set up to receive data from other hosts.
.IP "\fBHeartBeat\fR \fISeconds\fR" 4
.IX Item "HeartBeat Seconds"
\&\fBForce\fR the heartbeat of newly created RRD-files. This setting should be unset
in which case the heartbeat is set to twice the \fBStepSize\fR which should equal
the interval in which data is collected. Do not set this option unless you have
a very good reason to do so.
.IP "\fBRRARows\fR \fINumRows\fR" 4
.IX Item "RRARows NumRows"
The \f(CW\*(C`rrdtool plugin\*(C'\fR calculates the number of PDPs per \s-1CDP\s0 based on the
\&\fBStepSize\fR, this setting and a timespan. This plugin creates RRD-files with
three times five RRAs, i. e. five RRAs with the CFs \fB\s-1MIN\s0\fR, \fB\s-1AVERAGE\s0\fR, and
\&\fB\s-1MAX\s0\fR. The five RRAs are optimized for graphs covering one hour, one day, one
week, one month, and one year.
.Sp
So for each timespan, it calculates how many PDPs need to be consolidated into
one \s-1CDP\s0 by calculating:
  number of PDPs = timespan / (stepsize * rrarows)
.Sp
Bottom line is, set this no smaller than the width of you graphs in pixels. The
default is 1200.
.IP "\fBRRATimespan\fR \fISeconds\fR" 4
.IX Item "RRATimespan Seconds"
Adds an RRA-timespan, given in seconds. Use this option multiple times to have
more then one \s-1RRA\s0. If this option is never used, the built-in default of (3600,
86400, 604800, 2678400, 31622400) is used.
.Sp
For more information on how RRA-sizes are calculated see \fBRRARows\fR above.
.IP "\fB\s-1XFF\s0\fR \fIFactor\fR" 4
.IX Item "XFF Factor"
Set the \*(L"XFiles Factor\*(R". The default is 0.1. If unsure, don't set this option.
.IP "\fBCacheFlush\fR \fISeconds\fR" 4
.IX Item "CacheFlush Seconds"
When the \f(CW\*(C`rrdtool plugin\*(C'\fR uses a cache (by setting \fBCacheTimeout\fR, see below)
it writes all values for a certain RRD-file if the oldest value is older than
(or equal to) the number of seconds specified. If some RRD-file is not updated
anymore for some reason (the computer was shut down, the network is broken,
etc.) some values may still be in the cache. If \fBCacheFlush\fR is set, then the
entire cache is searched for entries older than \fBCacheTimeout\fR seconds and
written to disk every \fISeconds\fR seconds. Since this is kind of expensive and
does nothing under normal circumstances, this value should not be too small.
900 seconds might be a good value, though setting this to 7200 seconds doesn't
normally do much harm either.
.IP "\fBCacheTimeout\fR \fISeconds\fR" 4
.IX Item "CacheTimeout Seconds"
If this option is set to a value greater than zero, the \f(CW\*(C`rrdtool plugin\*(C'\fR will
save values in a cache, as described above. Writing multiple values at once
reduces IO-operations and thus lessens the load produced by updating the files.
The trade off is that the graphs kind of \*(L"drag behind\*(R" and that more memory is
used.
.ie n .Sh "Plugin ""sensors"""
.el .Sh "Plugin \f(CWsensors\fP"
.IX Subsection "Plugin sensors"
The \f(CW\*(C`sensors plugin\*(C'\fR uses \fBlm_sensors\fR to retrieve sensor-values. This means
that all the needed modules have to be loaded and lm_sensors has to be
configured (most likely by editing \fI/etc/sensors.conf\fR. Read
\&\fIsensors.conf\fR\|(5) for details.
.PP
The \fBlm_sensors\fR homepage can be found at
<http://secure.netroedge.com/~lm78/>.
.IP "\fBSensor\fR \fIchip\-bus\-address/type\-feature\fR" 4
.IX Item "Sensor chip-bus-address/type-feature"
Selects the name of the sensor which you want to collect or ignore, depending
on the \fBIgnoreSelected\fR below. For example, the option "\fBSensor\fR
\&\fIit8712\-isa\-0290/voltage\-in1\fR" will cause collectd to gather data for the
voltage sensor \fIin1\fR of the \fIit8712\fR on the isa bus at the address 0290.
.IP "\fBIgnoreSelected\fR \fItrue\fR|\fIfalse\fR" 4
.IX Item "IgnoreSelected true|false"
If no configuration if given, the \fBsensors\fR\-plugin will collect data from all
sensors. This may not be practical, especially for uninteresting sensors.
Thus, you can use the \fBSensor\fR\-option to pick the sensors you're interested
in. Sometimes, however, it's easier/preferred to collect all sensors \fIexcept\fR a
few ones. This option enables you to do that: By setting \fBIgnoreSelected\fR to
\&\fItrue\fR the effect of \fBSensor\fR is inversed: All selected sensors are ignored
and all other sensors are collected.
.ie n .Sh "Plugin ""snmp"""
.el .Sh "Plugin \f(CWsnmp\fP"
.IX Subsection "Plugin snmp"
Since the configuration of the \f(CW\*(C`snmp plugin\*(C'\fR is a little more complicated than
other plugins, its documentation has been moved to an own manpage,
\&\fIcollectd\-snmp\fR\|(5). Please see there for details.
.ie n .Sh "Plugin ""syslog"""
.el .Sh "Plugin \f(CWsyslog\fP"
.IX Subsection "Plugin syslog"
.IP "\fBLogLevel\fR \fBdebug|info|notice|warning|err\fR" 4
.IX Item "LogLevel debug|info|notice|warning|err"
Sets the log-level. If, for example, set to \fBnotice\fR, then all events with
severity \fBnotice\fR, \fBwarning\fR, or \fBerr\fR will be submitted to the
syslog-daemon.
.Sp
Please note that \fBdebug\fR is only available if collectd has been compiled with
debugging support.
.ie n .Sh "Plugin ""tail"""
.el .Sh "Plugin \f(CWtail\fP"
.IX Subsection "Plugin tail"
The \f(CW\*(C`tail plugin\*(C'\fR plugins follows logfiles, just like \fItail\fR\|(1) does, parses
each line and dispatches found values. What is matched can be configured by the
user using (extended) regular expressions, as described in \fIregex\fR\|(7).
.PP
.Vb 10
\&  <Plugin "tail">
\&    <File "/var/log/exim4/mainlog">
\&      Instance "exim"
\&      <Match>
\&        Regex "S=([1\-9][0\-9]*)"
\&        DSType "CounterAdd"
\&        Type "ipt_bytes"
\&        Instance "total"
\&      </Match>
\&      <Match>
\&        Regex "\e\e<R=local_user\e\e>"
\&        DSType "CounterInc"
\&        Type "email_count"
\&        Instance "local_user"
\&      </Match>
\&    </File>
\&  </Plugin>
.Ve
.PP
The config consists of one or more \fBFile\fR blocks, each of which configures one
logfile to parse. Within each \fBFile\fR block, there are one or more \fBMatch\fR
blocks, which configure a regular expression to search for.
.PP
The \fBInstance\fR option in the \fBFile\fR block may be used to set the plugin
instance. So in the above example the plugin name \f(CW\*(C`tail\-foo\*(C'\fR would be used.
This plugin instance is for all \fBMatch\fR blocks that \fBfollow\fR it, until the
next \fBInstance\fR option. This way you can extract several plugin instances from
one logfile, handy when parsing syslog and the like.
.PP
Each \fBMatch\fR block has the following options to describe how the match should
be performed:
.IP "\fBRegex\fR \fIregex\fR" 4
.IX Item "Regex regex"
Sets the regular expression to use for matching against a line. The first
subexpression has to match something that can be turned into a number by
\&\fIstrtoll\fR\|(3) or \fIstrtod\fR\|(3), depending on the value of \f(CW\*(C`CounterAdd\*(C'\fR, see
below. Because \fBextended\fR regular expressions are used, you do not need to use
backslashes for subexpressions! If in doubt, please consult \fIregex\fR\|(7). Due to
collectd's config parsing you need to escape backslashes, though. So if you
want to match literal parentheses you need to do the following:
.Sp
.Vb 1
\&  Regex "SPAM \e\e(Score: (\-?[0\-9]+\e\e.[0\-9]+)\e\e)"
.Ve
.IP "\fBDSType\fR \fIType\fR" 4
.IX Item "DSType Type"
Sets how the values are cumulated. \fIType\fR is one of:
.RS 4
.IP "\fBGaugeAverage\fR" 4
.IX Item "GaugeAverage"
Calculate the average.
.IP "\fBGaugeMin\fR" 4
.IX Item "GaugeMin"
Use the smallest number only.
.IP "\fBGaugeMax\fR" 4
.IX Item "GaugeMax"
Use the greatest number only.
.IP "\fBGaugeLast\fR" 4
.IX Item "GaugeLast"
Use the last number found.
.IP "\fBCounterSet\fR" 4
.IX Item "CounterSet"
The matched number is a counter. Simply sets the internal counter to this
value.
.IP "\fBCounterAdd\fR" 4
.IX Item "CounterAdd"
Add the matched value to the internal counter.
.IP "\fBCounterInc\fR" 4
.IX Item "CounterInc"
Increase the internal counter by one. This \fBDSType\fR is the only one that does
not use the matched subexpression, but simply counts the number of matched
lines. Thus, you may use a regular expression without submatch in this case.
.RE
.RS 4
.Sp
As you'd expect the \fBGauge*\fR types interpret the submatch as a floating point
number, using \fIstrtod\fR\|(3). The \fBCounterSet\fR and \fBCounterAdd\fR interpret the
submatch as an integer using \fIstrtoll\fR\|(3). \fBCounterInc\fR does not use the
submatch at all and it may be omitted in this case.
.RE
.IP "\fBType\fR \fIType\fR" 4
.IX Item "Type Type"
Sets the type used to dispatch this value. Detailed information about types and
their configuration can be found in \fItypes.db\fR\|(5).
.IP "\fBInstance\fR \fITypeInstance\fR" 4
.IX Item "Instance TypeInstance"
This optional setting sets the type instance to use.
.ie n .Sh "Plugin ""teamspeak2"""
.el .Sh "Plugin \f(CWteamspeak2\fP"
.IX Subsection "Plugin teamspeak2"
The \f(CW\*(C`teamspeak2 plugin\*(C'\fR connects to the query port of a teamspeak2 server and
polls interesting global and virtual server data. The plugin can query only one
physical server but unlimited virtual servers. You can use the following
options to configure it:
.IP "\fBHost\fR \fIhostname/ip\fR" 4
.IX Item "Host hostname/ip"
The hostname or ip which identifies the physical server.
Default: 127.0.0.1
.IP "\fBPort\fR \fIport\fR" 4
.IX Item "Port port"
The query port of the physical server. This needs to be a string.
Default: \*(L"51234\*(R"
.IP "\fBServer\fR \fIport\fR" 4
.IX Item "Server port"
This option has to be added once for every virtual server the plugin should
query. If you want to query the virtual server on port 8767 this is what the
option would look like:
.Sp
.Vb 1
\&  Server "8767"
.Ve
.Sp
This option, although numeric, needs to be a string, i.\ e. you \fBmust\fR
use quotes around it! If no such statement is given only global information
will be collected.
.ie n .Sh "Plugin ""tcpconns"""
.el .Sh "Plugin \f(CWtcpconns\fP"
.IX Subsection "Plugin tcpconns"
The \f(CW\*(C`tcpconns plugin\*(C'\fR counts the number of currently established \s-1TCP\s0
connections based on the local port and/or the remote port. Since there may be
a lot of connections the default if to count all connections with a local port,
for which a listening socket is opened. You can use the following options to
fine-tune the ports you are interested in:
.IP "\fBListeningPorts\fR \fItrue\fR|\fIfalse\fR" 4
.IX Item "ListeningPorts true|false"
If this option is set to \fItrue\fR, statistics for all local ports for which a
listening socket exists are collected. The default depends on \fBLocalPort\fR and
\&\fBRemotePort\fR (see below): If no port at all is specifically selected, the
default is to collect listening ports. If specific ports (no matter if local or
remote ports) are selected, this option defaults to \fIfalse\fR, i.\ e. only
the selected ports will be collected unless this option is set to \fItrue\fR
specifically.
.IP "\fBLocalPort\fR \fIPort\fR" 4
.IX Item "LocalPort Port"
Count the connections to a specific local port. This can be used to see how
many connections are handled by a specific daemon, e.\ g. the mailserver.
You have to specify the port in numeric form, so for the mailserver example
you'd need to set \fB25\fR.
.IP "\fBRemotePort\fR \fIPort\fR" 4
.IX Item "RemotePort Port"
Count the connections to a specific remote port. This is useful to see how
much a remote service is used. This is most useful if you want to know how many
connections a local service has opened to remote services, e.\ g. how many
connections a mail server or news server has to other mail or news servers, or
how many connections a web proxy holds to web servers. You have to give the
port in numeric form.
.ie n .Sh "Plugin ""unixsock"""
.el .Sh "Plugin \f(CWunixsock\fP"
.IX Subsection "Plugin unixsock"
.IP "\fBSocketFile\fR \fIPath\fR" 4
.IX Item "SocketFile Path"
Sets the socket-file which is to be created.
.IP "\fBSocketGroup\fR \fIGroup\fR" 4
.IX Item "SocketGroup Group"
If running as root change the group of the UNIX-socket after it has been
created. Defaults to \fBcollectd\fR.
.IP "\fBSocketPerms\fR \fIPermissions\fR" 4
.IX Item "SocketPerms Permissions"
Change the file permissions of the UNIX-socket after it has been created. The
permissions must be given as a numeric, octal value as you would pass to
\&\fIchmod\fR\|(1). Defaults to \fB0770\fR.
.ie n .Sh "Plugin ""uuid"""
.el .Sh "Plugin \f(CWuuid\fP"
.IX Subsection "Plugin uuid"
This plugin, if loaded, causes the Hostname to be taken from the machine's
\&\s-1UUID\s0. The \s-1UUID\s0 is a universally unique designation for the machine, usually
taken from the machine's \s-1BIOS\s0. This is most useful if the machine is running in
a virtual environment such as Xen, in which case the \s-1UUID\s0 is preserved across
shutdowns and migration.
.PP
The following methods are used to find the machine's \s-1UUID\s0, in order:
.IP "\(bu" 4
Check \fI/etc/uuid\fR (or \fIUUIDFile\fR).
.IP "\(bu" 4
Check for \s-1UUID\s0 from \s-1HAL\s0 (<http://www.freedesktop.org/wiki/Software/hal>) if
present.
.IP "\(bu" 4
Check for \s-1UUID\s0 from \f(CW\*(C`dmidecode\*(C'\fR / \s-1SMBIOS\s0.
.IP "\(bu" 4
Check for \s-1UUID\s0 from Xen hypervisor.
.PP
If no \s-1UUID\s0 can be found then the hostname is not modified.
.IP "\fBUUIDFile\fR \fIPath\fR" 4
.IX Item "UUIDFile Path"
Take the \s-1UUID\s0 from the given file (default \fI/etc/uuid\fR).
.ie n .Sh "Plugin ""vmem"""
.el .Sh "Plugin \f(CWvmem\fP"
.IX Subsection "Plugin vmem"
The \f(CW\*(C`vmem\*(C'\fR plugin collects information about the usage of virtual memory.
Since the statistics provided by the Linux kernel are very detailed, they are
collected very detailed. However, to get all the details, you have to switch
them on manually. Most people just want an overview over, such as the number of
pages read from swap space.
.IP "\fBVerbose\fR \fBtrue\fR|\fBfalse\fR" 4
.IX Item "Verbose true|false"
Enables verbose collection of information. This will start collecting page
\&\*(L"actions\*(R", e.\ g. page allocations, (de)activations, steals and so on.
Part of these statistics are collected on a \*(L"per zone\*(R" basis.
.ie n .Sh "Plugin ""vserver"""
.el .Sh "Plugin \f(CWvserver\fP"
.IX Subsection "Plugin vserver"
This plugin doesn't have any options. \fBVServer\fR support is only available for
Linux. It cannot yet be found in a vanilla kernel, though. To make use of this
plugin you need a kernel that has \fBVServer\fR support built in, i.\ e. you
need to apply the patches and compile your own kernel, which will then provide
the \fI/proc/virtual\fR filesystem that is required by this plugin.
.PP
The \fBVServer\fR homepage can be found at <http://linux\-vserver.org/>.
.SH "THRESHOLD CONFIGURATION"
.IX Header "THRESHOLD CONFIGURATION"
Starting with version \f(CW4.3.0\fR collectd has support for \fBmonitoring\fR. By that
we mean that the values are not only stored or sent somewhere, but that they
are judged and, if a problem is recognized, acted upon. The only action
collectd takes itself is to generate and dispatch a \*(L"notification\*(R". Plugins can
register to receive notifications and perform appropriate further actions.
.PP
Since systems and what you expect them to do differ a lot, you can configure
\&\fBthresholds\fR for your values freely. This gives you a lot of flexibility but
also a lot of responsibility.
.PP
Every time a value is out of range a notification is dispatched. This means
that the idle percentage of your \s-1CPU\s0 needs to be less then the configured
threshold only once for a notification to be generated. There's no such thing
as a moving average or similar \- at least not now.
.PP
Also, all values that match a threshold are considered to be relevant or
\&\*(L"interesting\*(R". As a consequence collectd will issue a notification if they are
not received for twice the last timeout of the values. If, for example, some
hosts sends it's \s-1CPU\s0 statistics to the server every 60 seconds, a notification
will be dispatched after about 120 seconds. It may take a little longer because
the timeout is checked only once each \fBInterval\fR on the server.
.PP
Here is a configuration example to get you started. Read below for more
information.
.PP
.Vb 9
\& <Threshold>
\&   <Type "foo">
\&     WarningMin    0.00
\&     WarningMax 1000.00
\&     FailureMin    0.00
\&     FailureMax 1200.00
\&     Invert false
\&     Instance "bar"
\&   </Type>
\&
\&   <Plugin "interface">
\&     Instance "eth0"
\&     <Type "if_octets">
\&       FailureMax 10000000
\&       DataSource "rx"
\&     </Type>
\&   </Plugin>
\&
\&   <Host "hostname">
\&     <Type "cpu">
\&       Instance "idle"
\&       FailureMin 10
\&     </Type>
\&
\&     <Plugin "memory">
\&       <Type "memory">
\&         Instance "cached"
\&         WarningMin 100000000
\&       </Type>
\&     </Plugin>
\&   </Host>
\& </Threshold>
.Ve
.PP
There are basically two types of configuration statements: The \f(CW\*(C`Host\*(C'\fR,
\&\f(CW\*(C`Plugin\*(C'\fR, and \f(CW\*(C`Type\*(C'\fR blocks select the value for which a threshold should be
configured. The \f(CW\*(C`Plugin\*(C'\fR and \f(CW\*(C`Type\*(C'\fR blocks may be specified further using the
\&\f(CW\*(C`Instance\*(C'\fR option. You can combine the block by nesting the blocks, though
they must be nested in the above order, i.\ e. \f(CW\*(C`Host\*(C'\fR may contain either
\&\f(CW\*(C`Plugin\*(C'\fR and \f(CW\*(C`Type\*(C'\fR blocks, \f(CW\*(C`Plugin\*(C'\fR may only contain \f(CW\*(C`Type\*(C'\fR blocks and
\&\f(CW\*(C`Type\*(C'\fR may not contain other blocks. If multiple blocks apply to the same
value the most specific block is used.
.PP
The other statements specify the threshold to configure. They \fBmust\fR be
included in a \f(CW\*(C`Type\*(C'\fR block. Currently the following statements are recognized:
.IP "\fBFailureMax\fR \fIValue\fR" 4
.IX Item "FailureMax Value"
.PD 0
.IP "\fBWarningMax\fR \fIValue\fR" 4
.IX Item "WarningMax Value"
.PD
Sets the upper bound of acceptable values. If unset defaults to positive
infinity. If a value is greater than \fBFailureMax\fR a \fB\s-1FAILURE\s0\fR notification
will be created. If the value is greater than \fBWarningMax\fR but less than (or
equal to) \fBFailureMax\fR a \fB\s-1WARNING\s0\fR notification will be created.
.IP "\fBFailureMin\fR \fIValue\fR" 4
.IX Item "FailureMin Value"
.PD 0
.IP "\fBWarningMin\fR \fIValue\fR" 4
.IX Item "WarningMin Value"
.PD
Sets the lower bound of acceptable values. If unset defaults to negative
infinity. If a value is less than \fBFailureMin\fR a \fB\s-1FAILURE\s0\fR notification will
be created. If the value is less than \fBWarningMin\fR but greater than (or equal
to) \fBFailureMin\fR a \fB\s-1WARNING\s0\fR notification will be created.
.IP "\fBDataSource\fR \fIDSName\fR" 4
.IX Item "DataSource DSName"
Some data sets have more than one \*(L"data source\*(R". Interesting examples are the
\&\f(CW\*(C`if_octets\*(C'\fR data set, which has received (\f(CW\*(C`rx\*(C'\fR) and sent (\f(CW\*(C`tx\*(C'\fR) bytes and
the \f(CW\*(C`disk_ops\*(C'\fR data set, which holds \f(CW\*(C`read\*(C'\fR and \f(CW\*(C`write\*(C'\fR operations. The
system load data set, \f(CW\*(C`load\*(C'\fR, even has three data sources: \f(CW\*(C`shortterm\*(C'\fR,
\&\f(CW\*(C`midterm\*(C'\fR, and \f(CW\*(C`longterm\*(C'\fR.
.Sp
Normally, all data sources are checked against a configured threshold. If this
is undesirable, or if you want to specify different limits for each data
source, you can use the \fBDataSource\fR option to have a threshold apply only to
one data source.
.IP "\fBInvert\fR \fBtrue\fR|\fBfalse\fR" 4
.IX Item "Invert true|false"
If set to \fBtrue\fR the range of acceptable values is inverted, i.\ e.
values between \fBFailureMin\fR and \fBFailureMax\fR (\fBWarningMin\fR and
\&\fBWarningMax\fR) are not okay. Defaults to \fBfalse\fR.
.IP "\fBPersist\fR \fBtrue\fR|\fBfalse\fR" 4
.IX Item "Persist true|false"
Sets how often notifications are generated. If set to \fBtrue\fR one notification
will be generated for each value that is out of the acceptable range. If set to
\&\fBfalse\fR (the default) then a notification is only generated if a value is out
of range but the previous value was okay.
.Sp
This applies to missing values, too: If set to \fBtrue\fR a notification about a
missing value is generated once every \fBInterval\fR seconds. If set to \fBfalse\fR
only one such notification is generated until the value appears again.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIcollectd\fR\|(1),
\&\fIcollectd\-exec\fR\|(5),
\&\fIcollectd\-perl\fR\|(5),
\&\fIcollectd\-unixsock\fR\|(5),
\&\fItypes.db\fR\|(5),
\&\fIhddtemp\fR\|(8),
kstat(3KSTAT),
\&\fImbmon\fR\|(1),
\&\fIrrdtool\fR\|(1),
\&\fIsensors\fR\|(1)
.SH "AUTHOR"
.IX Header "AUTHOR"
Florian Forster <octo@verplant.org>
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 1326:" 4
.IX Item "Around line 1326:"
You forgot a '=back' before '=head2'
.IP "Around line 1338:" 4
.IX Item "Around line 1338:"
\&'=item' outside of any '=over'
