=head1 NAME

collectd-perl - Documentation of collectd's C<perl plugin>

=head1 SYNOPSIS

  LoadPlugin perl
  # ...
  <Plugin perl>
    IncludeDir "/path/to/perl/plugins"
    BaseName "Collectd::Plugin"
    EnableDebugger ""
    LoadPlugin "FooBar"
  </Plugin>

=head1 DESCRIPTION

The C<perl plugin> embeds a Perl-interpreter into collectd and provides an
interface to collectd's plugin system. This makes it possible to write plugins
for collectd in Perl. This is a lot more efficient than executing a
Perl-script every time you want to read a value with the C<exec plugin> (see
L<collectd-exec(5)>) and provides a lot more functionality, too.

Please note that this is still considered to be experimental and subject to
change between minor releases.

=head1 CONFIGURATION

=over 4

=item B<LoadPlugin> I<Plugin>

Loads the Perl plugin I<Plugin>. This does basically the same as B<use> would
do in a Perl program. As a side effect, the first occurrence of this option
causes the Perl-interpreter to be initialized.

=item B<BaseName> I<Name>

Prepends I<Name>B<::> to all plugin names loaded after this option. This is
provided for convenience to keep plugin names short.

=item B<EnableDebugger> I<Package>[=I<option>,...]

Run collectd under the control of the Perl source debugger. If I<Package> is
not the empty string, control is passed to the debugging, profiling, or
tracing module installed as Devel::I<Package>. A comma-separated list of
options may be specified after the "=" character. Please note that you may not
leave out the I<Package> option even if you specify B<"">. This is the same as
using the B<-d:Package> command line option.

See L<perldebug> for detailed documentation about debugging Perl.

=item B<IncludeDir> I<Dir>

Adds I<Dir> to the B<@INC> array. This is the same as using the B<-IDir>
command line option or B<use lib Dir> in the source code. Please note that it
only has effect on plugins loaded after this option.

=back

=head1 WRITING YOUR OWN PLUGINS

Writing your own plugins is quite simple. collectd manages plugins by means of
B<dispatch functions> which call the appropriate B<callback functions>
registered by the plugins. Any plugin basically consists of the implementation
of these callback functions and initializing code which registers the
functions with collectd. See the section "EXAMPLES" below for a really basic
example. The following types of B<callback functions> are known to collectd
(all of these are optional):

=over 4

=item init functions

This type of functions is called once after loading the module and before any
calls to the read and write functions. It should be used to initialize the
internal state of the plugin (e.E<nbsp>g. open sockets, ...). If the return
value evaluates to B<false>, the plugin will be disabled.

=item read functions

This type of function is used to collect the actual data. It is called once
per interval (see the B<Interval> configuration option of collectd). Usually
it will call B<plugin_dispatch_values> to dispatch the values to collectd
which will pass them on to all registered B<write functions>. If the return
value evaluates to B<false> the plugin will be skipped for an increasing
amount of time until it returns B<true> again.

=item write functions

This type of function is used to write the dispatched values. It is called
once for each call to B<plugin_dispatch_values>.

=item log functions

This type of function is used to pass messages of plugins or the daemon itself
to the user.

=item shutdown functions

This type of function is called once before the daemon shuts down. It should
be used to clean up the plugin (e.g. close sockets, ...).

=back

See the documentation of the B<plugin_register> method in the section
"METHODS" below for the number and types of arguments passed to each
B<callback function>. This section also explains how to register B<callback
functions> with collectd.

To enable a plugin, copy it to a place where Perl can find it (i.E<nbsp>e. a
directory listed in the B<@INC> array) just as any other Perl plugin and add
an appropriate B<LoadPlugin> option to the configuration file. After
restarting collectd you're done.

=head1 DATA TYPES

The following complex types are used to pass values between the Perl plugin
and collectd:

=over 4

=item Data-Set

A data-set is a list of one or more data-sources. Each data-source defines a
name, type, min- and max-value and the data-set wraps them up into one
structure. The general layout looks like this:

  [{
    name => 'data_source_name',
    type => DS_TYPE_COUNTER || DS_TYPE_GAUGE
    min  => value || undef,
    max  => value || undef
  }, ...]

=item Value-List

A value-list is one structure which features an array of values and fields to
identify the values, i.E<nbsp>e. time and host, plugin name and
plugin-instance as well as a type and type-instance. Since the "type" is not
included in the value-list but is passed as an extra argument, the general
layout looks like this:

  {
    values => [123, 0.5],
    time   => time (),
    host   => 'localhost',
    plugin => 'myplugin',
    plugin_instance => '',
    type_instance   => ''
  }

=back

=head1 METHODS

The following functions provide the C-interface to Perl-modules. They are
exported by the ":plugin" export tag (see the section "EXPORTS" below).

=over 4

=item B<plugin_register> (I<type>, I<name>, I<data>)

Registers a callback-function or data-set.

I<type> can be one of:

=over 4

=item TYPE_INIT

=item TYPE_READ

=item TYPE_WRITE

=item TYPE_LOG

=item TYPE_SHUTDOWN

=item TYPE_DATASET

=back

I<name> is the name of the callback-function or the type of the data-set,
depending on the value of I<type>. (Please note that the type of the data-set
is the value passed as I<name> here and has nothing to do with the I<type>
argument which simply tells B<plugin_register> what is being registered.)

The last argument, I<data>, is either a function- or an array-reference. If
I<type> is B<TYPE_DATASET>, then the I<data> argument must be an
array-reference which points to an array of hashes. Each hash describes one
data-source. For the exact layout see B<Data-Set> above. Please note that
there is a large number of predefined data-sets available in the B<types.db>
file which are automatically registered with collectd.

If the I<type> argument is any of the other types (B<TYPE_INIT>, B<TYPE_READ>,
...) then I<data> is expected to be a function reference. These functions are
called in the various stages of the daemon and are passed the following
arguments:

=over 4

=item TYPE_INIT

=item TYPE_READ

=item TYPE_SHUTDOWN

No arguments are passed

=item TYPE_WRITE

The arguments passed are I<type>, I<data-set>, and I<value-list>. I<type> is a
string. For the layout of I<data-set> and I<value-list> see above.

=item TYPE_LOG

The arguments are I<log-level> and I<message>. The log level is small for
important messages and high for less important messages. The least important
level is B<LOG_DEBUG>, the most important level is B<LOG_ERR>. In between there
are (from least to most important): B<LOG_INFO>, B<LOG_NOTICE>, and
B<LOG_WARNING>. I<message> is simply a string B<without> a newline at the end.

=back

=item B<plugin_unregister> (I<type>, I<plugin>)

Removes a callback or data-set from collectd's internal list of
functionsE<nbsp>/ datasets.

=item B<plugin_dispatch_values> (I<type>, I<value-list>)

Submits a I<value-list> of type I<type> to the daemon. If the data-set I<type>
is found (and the number of values matches the number of data-sources) then the
type, data-set and value-list is passed to all write-callbacks that are
registered with the daemon.

=item B<plugin_log> (I<log-level>, I<message>)

Submits a I<message> of level I<log-level> to collectd's logging mechanism.
The message is passed to all log-callbacks that are registered with collectd.

=item B<ERROR>, B<WARNING>, B<NOTICE>, B<INFO>, B<DEBUG> (I<message>)

Wrappers around B<plugin_log>, using B<LOG_ERR>, B<LOG_WARNING>,
B<LOG_NOTICE>, B<LOG_INFO> and B<LOG_DEBUG> respectively as I<log-level>.

=back

=head1 EXPORTS

By default no symbols are exported. However, the following export tags are
available (B<:all> will export all of them):

=over 4

=item B<:plugin>

=over 4

=item B<plugin_register> ()

=item B<plugin_unregister> ()

=item B<plugin_dispatch_values> ()

=item B<plugin_log> ()

=back

=item B<:types>

=over 4

=item B<TYPE_INIT>

=item B<TYPE_READ>

=item B<TYPE_WRITE>

=item B<TYPE_SHUTDOWN>

=item B<TYPE_LOG>

=back

=item B<:ds_types>

=over 4

=item B<DS_TYPE_COUNTER>

=item B<DS_TYPE_GAUGE>

=back

=item B<:log>

=over 4

=item B<ERROR> ()

=item B<WARNING> ()

=item B<NOTICE> ()

=item B<INFO> ()

=item B<DEBUG> ()

=item B<LOG_ERR>

=item B<LOG_WARNING>

=item B<LOG_NOTICE>

=item B<LOG_INFO>

=item B<LOG_DEBUG>

=back

=back

=head1 EXAMPLES

Any Perl plugin will start similar to:

  package Collectd::Plugins::FooBar;

  use strict;
  use warnings;

  use Collectd qw( :all );

A very simple read function will look like:

  sub foobar_read
  {
    my $vl = { plugin => 'foobar' };
    $vl->{'values'} = [ rand(42) ];
    plugin_dispatch_values ('gauge', $vl);
    return 1;
  }

A very simple write function will look like:

  sub foobar_write
  {
    my ($type, $ds, $vl) = @_;
    for (my $i = 0; $i < scalar (@$ds); ++$i) {
      print "$vl->{'plugin'} ($vl->{'type'}): $vl->{'values'}->[$i]\n";
    }
    return 1;
  }

To register those functions with collectd:

  plugin_register (TYPE_READ, "foobar", \&foobar_read);
  plugin_register (TYPE_WRITE, "foobar", \&foobar_write);

See the section "DATA TYPES" above for a complete documentation of the data
types used by the read and write functions.

=head1 BUGS

This plugin does not yet work correctly if collectd uses multiple threads.
Perl does not allow multiple threads to access a single interpreter at the
same time. As a temporary workaround you should use a single read thread only
(see collectd's B<ReadThread> configuration option).

=head1 SEE ALSO

L<collectd(1)>,
L<collectd.conf(5)>,
L<collectd-exec(5)>,
L<perl(1)>,
L<perldebug(1)>

=head1 AUTHOR

The C<perl plugin> has been written by Sebastian Harl
E<lt>shE<nbsp>atE<nbsp>tokkee.orgE<gt>.

This manpage has been written by Florian Forster
E<lt>octoE<nbsp>atE<nbsp>verplant.orgE<gt> and Sebastian Harl
E<lt>shE<nbsp>atE<nbsp>tokkee.orgE<gt>.

=cut

