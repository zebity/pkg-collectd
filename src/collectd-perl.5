.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "COLLECTD-PERL 5"
.TH COLLECTD-PERL 5 "2007-08-26" "4.0.7" "collectd"
.SH "NAME"
collectd\-perl \- Documentation of collectd's \f(CW\*(C`perl plugin\*(C'\fR
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  # See collectd.conf(5)
\&  LoadPlugin perl
\&  # ...
\&  <Plugin perl>
\&    IncludeDir "/path/to/perl/plugins"
\&    BaseName "Collectd::Plugin"
\&    LoadPlugin "FooBar"
\&  </Plugin>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`perl plugin\*(C'\fR includes a Perl-interpreter in collectd and provides
Perl-equivalents of the plugin\-functions. This makes it possible to write
plugins for collectd in Perl. This is a lot more efficient than executing a
Perl-script every time you want to read a value with the \f(CW\*(C`exec plugin\*(C'\fR (see
\&\fIcollectd\-exec\fR\|(5)) and provides a lot more functionality, too.
.PP
Please note that this is still considered to be experimental and subject to
change between minor releases.
.SH "DATA TYPES"
.IX Header "DATA TYPES"
There are two more complex types you need to know about:
.IP "Data-Set" 4
.IX Item "Data-Set"
A data-set is a list of one or more data\-sources. Each data-source defines a
name, type, min\- and max-value and the data-set wraps them up into one
structure. The general layout looks like this:
.Sp
.Vb 6
\&  [{
\&    name => 'data_source_name',
\&    type => DS_TYPE_COUNTER || DS_TYPE_GAUGE
\&    min  => value || undef,
\&    max  => value || undef
\&  }, ...]
.Ve
.IP "Value-List" 4
.IX Item "Value-List"
A value-list is one structure which features an array of values and fields to
identify the values, i. e. time and host, plugin name and plugin-instance as
well as a type and type\-instance. Since the \*(L"type\*(R" is not included in the
value-list but is passed as an extra argument, the general layout looks like
this:
.Sp
.Vb 8
\&  {
\&    values => [123, 0.5],
\&    time   => time (),
\&    host   => 'localhost',
\&    plugin => 'myplugin',
\&    plugin_instance => '',
\&    type_instance   => ''
\&  }
.Ve
.SH "METHODS"
.IX Header "METHODS"
The following functions provide the C\-interface to Perl\-modules. They are
automatically exported into the module's namespace. You don't need to \f(CW\*(C`use\*(C'\fR
any special Modules to access them.
.IP "\fBplugin_register\fR (\fItype\fR, \fIname\fR, \fIdata\fR)" 4
.IX Item "plugin_register (type, name, data)"
Registers a callback-function or data\-set.
.Sp
\&\fItype\fR can be one of:
.RS 4
.IP "\s-1TYPE_INIT\s0" 4
.IX Item "TYPE_INIT"
.PD 0
.IP "\s-1TYPE_READ\s0" 4
.IX Item "TYPE_READ"
.IP "\s-1TYPE_WRITE\s0" 4
.IX Item "TYPE_WRITE"
.IP "\s-1TYPE_LOG\s0" 4
.IX Item "TYPE_LOG"
.IP "\s-1TYPE_SHUTDOWN\s0" 4
.IX Item "TYPE_SHUTDOWN"
.IP "\s-1TYPE_DATASET\s0" 4
.IX Item "TYPE_DATASET"
.RE
.RS 4
.PD
.Sp
\&\fIname\fR is the name of the callback-function or the type of the data\-set,
depending on the value of \fItype\fR. (Please note that the type of the data-set
is the value passed as \fIname\fR here and has nothing to do with the \fItype\fR
argument which simply tells \fBplugin_register\fR what is being registered.)
.Sp
The last argument, \fIdata\fR, is either a function\- or an array\-reference. If
\&\fItype\fR is \fB\s-1TYPE_DATASET\s0\fR, then the \fIdata\fR argument must be an
array-reference which points to an array of hashes. Each hash describes one
data\-source. For the exact layout see \fBData-Set\fR above.
.Sp
If the \fItype\fR argument is any of the other types (\fB\s-1TYPE_INIT\s0\fR, \fB\s-1TYPE_READ\s0\fR,
\&...) then \fIdata\fR is expected to be a function reference. These functions are
called in the various stages of the daemon and are passed the following
arguments:
.IP "\s-1TYPE_INIT\s0" 4
.IX Item "TYPE_INIT"
.PD 0
.IP "\s-1TYPE_READ\s0" 4
.IX Item "TYPE_READ"
.IP "\s-1TYPE_SHUTDOWN\s0" 4
.IX Item "TYPE_SHUTDOWN"
.PD
No arguments are passed
.IP "\s-1TYPE_WRITE\s0" 4
.IX Item "TYPE_WRITE"
The arguments passed are \fItype\fR, \fIdata-set\fR, and \fIvalue-list\fR. \fItype\fR is a
string. For the layout of \fIdata-set\fR and \fIvalue-list\fR see above.
.IP "\s-1TYPE_LOG\s0" 4
.IX Item "TYPE_LOG"
The arguments are \fIlog-level\fR and \fImessage\fR. The log level is small for
important messages and high for less important messages. The least important
level is \fB\s-1LOG_DEBUG\s0\fR, the most important level is \fB\s-1LOG_ERR\s0\fR. In between there
are (from least to most important): \fB\s-1LOG_INFO\s0\fR, \fB\s-1LOG_NOTICE\s0\fR, and
\&\fB\s-1LOG_WARNING\s0\fR. \fImessage\fR is simply a string \fBwithout\fR a newline at the end.
.RE
.RS 4
.RE
.IP "\fBplugin_unregister\fR (\fItype\fR, \fIplugin\fR)" 4
.IX Item "plugin_unregister (type, plugin)"
Removes a callback or data-set from collectd's internal list of
functions\ / datasets.
.IP "\fBplugin_dispatch_values\fR (\fItype\fR, \fIvalue-list\fR)" 4
.IX Item "plugin_dispatch_values (type, value-list)"
Submits a \fIvalue-list\fR of type \fItype\fR to the daemon. If the data-set \fItype\fR
is found (and the number of values matches the number of data\-sources) then the
type, data-set and value-list is passed to all write-callbacks that are
registered with the daemon.
.IP "\fBplugin_log\fR (\fIlog-level\fR, \fImessage\fR)" 4
.IX Item "plugin_log (log-level, message)"
Submits a \fImessage\fR of level \fIlog-level\fR to collectd's logging mechanism.
The message is passed to all log-callbacks that are registered with collectd.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIcollectd\fR\|(1),
\&\fIcollectd.conf\fR\|(5),
\&\fIcollectd\-exec\fR\|(5),
\&\fIperl\fR\|(1)
.SH "AUTHOR"
.IX Header "AUTHOR"
The \f(CW\*(C`perl plugin\*(C'\fR has been written by Sebastian Harl <sh\ at\ tokkee.org>.
.PP
This manpage has been written by Florian Forster <octo\ at\ verplant.org>.
