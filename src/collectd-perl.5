.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "COLLECTD-PERL 5"
.TH COLLECTD-PERL 5 "2007-11-08" "4.2.1" "collectd"
.SH "NAME"
collectd\-perl \- Documentation of collectd's \f(CW\*(C`perl plugin\*(C'\fR
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  LoadPlugin perl
\&  # ...
\&  <Plugin perl>
\&    IncludeDir "/path/to/perl/plugins"
\&    BaseName "Collectd::Plugin"
\&    EnableDebugger ""
\&    LoadPlugin "FooBar"
\&  </Plugin>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`perl plugin\*(C'\fR embeds a Perl-interpreter into collectd and provides an
interface to collectd's plugin system. This makes it possible to write plugins
for collectd in Perl. This is a lot more efficient than executing a
Perl-script every time you want to read a value with the \f(CW\*(C`exec plugin\*(C'\fR (see
\&\fIcollectd\-exec\fR\|(5)) and provides a lot more functionality, too.
.PP
Please note that this is still considered to be experimental and subject to
change between minor releases.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.IP "\fBLoadPlugin\fR \fIPlugin\fR" 4
.IX Item "LoadPlugin Plugin"
Loads the Perl plugin \fIPlugin\fR. This does basically the same as \fBuse\fR would
do in a Perl program. As a side effect, the first occurrence of this option
causes the Perl-interpreter to be initialized.
.IP "\fBBaseName\fR \fIName\fR" 4
.IX Item "BaseName Name"
Prepends \fIName\fR\fB::\fR to all plugin names loaded after this option. This is
provided for convenience to keep plugin names short.
.IP "\fBEnableDebugger\fR \fIPackage\fR[=\fIoption\fR,...]" 4
.IX Item "EnableDebugger Package[=option,...]"
Run collectd under the control of the Perl source debugger. If \fIPackage\fR is
not the empty string, control is passed to the debugging, profiling, or
tracing module installed as Devel::\fIPackage\fR. A comma-separated list of
options may be specified after the \*(L"=\*(R" character. Please note that you may not
leave out the \fIPackage\fR option even if you specify \fB""\fR. This is the same as
using the \fB\-d:Package\fR command line option.
.Sp
See perldebug for detailed documentation about debugging Perl.
.IP "\fBIncludeDir\fR \fIDir\fR" 4
.IX Item "IncludeDir Dir"
Adds \fIDir\fR to the \fB@INC\fR array. This is the same as using the \fB\-IDir\fR
command line option or \fBuse lib Dir\fR in the source code. Please note that it
only has effect on plugins loaded after this option.
.SH "WRITING YOUR OWN PLUGINS"
.IX Header "WRITING YOUR OWN PLUGINS"
Writing your own plugins is quite simply. collectd manages plugins by means of
\&\fBdispatch functions\fR which call the appropriate \fBcallback functions\fR
registered by the plugins. Any plugin basically consists of the implementation
of these callback functions and initializing code which registers the
functions with collectd. See the section \*(L"\s-1EXAMPLES\s0\*(R" below for a really basic
example. The following types of \fBcallback functions\fR are known to collectd
(all of these are optional):
.IP "init functions" 4
.IX Item "init functions"
This type of functions is called once after loading the module and before any
calls to the read and write functions. It should be used to initialize the
internal state of the plugin (e.\ g. open sockets, ...). If the return
value evaluates to \fBfalse\fR, the plugin will be disabled.
.IP "read functions" 4
.IX Item "read functions"
This type of function is used to collect the actual data. It is called once
per interval (see the \fBInterval\fR configuration option of collectd). Usually
it will call \fBplugin_dispatch_values\fR to dispatch the values to collectd
which will pass them on to all registered \fBwrite functions\fR. If the return
value evaluates to \fBfalse\fR the plugin will be skipped for an increasing
amount of time until it returns \fBtrue\fR again.
.IP "write functions" 4
.IX Item "write functions"
This type of function is used to write the dispatched values. It is called
once for each call to \fBplugin_dispatch_values\fR.
.IP "log functions" 4
.IX Item "log functions"
This type of function is used to pass messages of plugins or the daemon itself
to the user.
.IP "shutdown functions" 4
.IX Item "shutdown functions"
This type of function is called once before the daemon shuts down. It should
be used to clean up the plugin (e.g. close sockets, ...).
.PP
See the documentation of the \fBplugin_register\fR method in the section
\&\*(L"\s-1METHODS\s0\*(R" below for the number and types of arguments passed to each
\&\fBcallback function\fR. This section also explains how to register \fBcallback
functions\fR with collectd.
.PP
To enable a plugin, copy it to a place where Perl can find it (i.\ e. a
directory listed in the \fB@INC\fR array) just as any other Perl plugin and add
an appropriate \fBLoadPlugin\fR option to the configuration file. After
restarting collectd you're done.
.SH "DATA TYPES"
.IX Header "DATA TYPES"
The following complex types are used to pass values between the Perl plugin
and collectd:
.IP "Data-Set" 4
.IX Item "Data-Set"
A data-set is a list of one or more data\-sources. Each data-source defines a
name, type, min\- and max-value and the data-set wraps them up into one
structure. The general layout looks like this:
.Sp
.Vb 6
\&  [{
\&    name => \(aqdata_source_name\(aq,
\&    type => DS_TYPE_COUNTER || DS_TYPE_GAUGE
\&    min  => value || undef,
\&    max  => value || undef
\&  }, ...]
.Ve
.IP "Value-List" 4
.IX Item "Value-List"
A value-list is one structure which features an array of values and fields to
identify the values, i.\ e. time and host, plugin name and
plugin-instance as well as a type and type\-instance. Since the \*(L"type\*(R" is not
included in the value-list but is passed as an extra argument, the general
layout looks like this:
.Sp
.Vb 8
\&  {
\&    values => [123, 0.5],
\&    time   => time (),
\&    host   => \(aqlocalhost\(aq,
\&    plugin => \(aqmyplugin\(aq,
\&    plugin_instance => \(aq\(aq,
\&    type_instance   => \(aq\(aq
\&  }
.Ve
.SH "METHODS"
.IX Header "METHODS"
The following functions provide the C\-interface to Perl\-modules. They are
exported by the \*(L":plugin\*(R" export tag (see the section \*(L"\s-1EXPORTS\s0\*(R" below).
.IP "\fBplugin_register\fR (\fItype\fR, \fIname\fR, \fIdata\fR)" 4
.IX Item "plugin_register (type, name, data)"
Registers a callback-function or data\-set.
.Sp
\&\fItype\fR can be one of:
.RS 4
.IP "\s-1TYPE_INIT\s0" 4
.IX Item "TYPE_INIT"
.PD 0
.IP "\s-1TYPE_READ\s0" 4
.IX Item "TYPE_READ"
.IP "\s-1TYPE_WRITE\s0" 4
.IX Item "TYPE_WRITE"
.IP "\s-1TYPE_LOG\s0" 4
.IX Item "TYPE_LOG"
.IP "\s-1TYPE_SHUTDOWN\s0" 4
.IX Item "TYPE_SHUTDOWN"
.IP "\s-1TYPE_DATASET\s0" 4
.IX Item "TYPE_DATASET"
.RE
.RS 4
.PD
.Sp
\&\fIname\fR is the name of the callback-function or the type of the data\-set,
depending on the value of \fItype\fR. (Please note that the type of the data-set
is the value passed as \fIname\fR here and has nothing to do with the \fItype\fR
argument which simply tells \fBplugin_register\fR what is being registered.)
.Sp
The last argument, \fIdata\fR, is either a function\- or an array\-reference. If
\&\fItype\fR is \fB\s-1TYPE_DATASET\s0\fR, then the \fIdata\fR argument must be an
array-reference which points to an array of hashes. Each hash describes one
data\-source. For the exact layout see \fBData-Set\fR above. Please note that
there is a large number of predefined data-sets available in the \fBtypes.db\fR
file which are automatically registered with collectd.
.Sp
If the \fItype\fR argument is any of the other types (\fB\s-1TYPE_INIT\s0\fR, \fB\s-1TYPE_READ\s0\fR,
\&...) then \fIdata\fR is expected to be a function reference. These functions are
called in the various stages of the daemon and are passed the following
arguments:
.IP "\s-1TYPE_INIT\s0" 4
.IX Item "TYPE_INIT"
.PD 0
.IP "\s-1TYPE_READ\s0" 4
.IX Item "TYPE_READ"
.IP "\s-1TYPE_SHUTDOWN\s0" 4
.IX Item "TYPE_SHUTDOWN"
.PD
No arguments are passed
.IP "\s-1TYPE_WRITE\s0" 4
.IX Item "TYPE_WRITE"
The arguments passed are \fItype\fR, \fIdata-set\fR, and \fIvalue-list\fR. \fItype\fR is a
string. For the layout of \fIdata-set\fR and \fIvalue-list\fR see above.
.IP "\s-1TYPE_LOG\s0" 4
.IX Item "TYPE_LOG"
The arguments are \fIlog-level\fR and \fImessage\fR. The log level is small for
important messages and high for less important messages. The least important
level is \fB\s-1LOG_DEBUG\s0\fR, the most important level is \fB\s-1LOG_ERR\s0\fR. In between there
are (from least to most important): \fB\s-1LOG_INFO\s0\fR, \fB\s-1LOG_NOTICE\s0\fR, and
\&\fB\s-1LOG_WARNING\s0\fR. \fImessage\fR is simply a string \fBwithout\fR a newline at the end.
.RE
.RS 4
.RE
.IP "\fBplugin_unregister\fR (\fItype\fR, \fIplugin\fR)" 4
.IX Item "plugin_unregister (type, plugin)"
Removes a callback or data-set from collectd's internal list of
functions\ / datasets.
.IP "\fBplugin_dispatch_values\fR (\fItype\fR, \fIvalue-list\fR)" 4
.IX Item "plugin_dispatch_values (type, value-list)"
Submits a \fIvalue-list\fR of type \fItype\fR to the daemon. If the data-set \fItype\fR
is found (and the number of values matches the number of data\-sources) then the
type, data-set and value-list is passed to all write-callbacks that are
registered with the daemon.
.IP "\fBplugin_log\fR (\fIlog-level\fR, \fImessage\fR)" 4
.IX Item "plugin_log (log-level, message)"
Submits a \fImessage\fR of level \fIlog-level\fR to collectd's logging mechanism.
The message is passed to all log-callbacks that are registered with collectd.
.IP "\fB\s-1ERROR\s0\fR, \fB\s-1WARNING\s0\fR, \fB\s-1NOTICE\s0\fR, \fB\s-1INFO\s0\fR, \fB\s-1DEBUG\s0\fR (\fImessage\fR)" 4
.IX Item "ERROR, WARNING, NOTICE, INFO, DEBUG (message)"
Wrappers around \fBplugin_log\fR, using \fB\s-1LOG_ERR\s0\fR, \fB\s-1LOG_WARNING\s0\fR,
\&\fB\s-1LOG_NOTICE\s0\fR, \fB\s-1LOG_INFO\s0\fR and \fB\s-1LOG_DEBUG\s0\fR respectively as \fIlog-level\fR.
.SH "EXPORTS"
.IX Header "EXPORTS"
By default no symbols are exported. However, the following export tags are
available (\fB:all\fR will export all of them):
.IP "\fB:plugin\fR" 4
.IX Item ":plugin"
.RS 4
.PD 0
.IP "\fBplugin_register\fR ()" 4
.IX Item "plugin_register ()"
.IP "\fBplugin_unregister\fR ()" 4
.IX Item "plugin_unregister ()"
.IP "\fBplugin_dispatch_values\fR ()" 4
.IX Item "plugin_dispatch_values ()"
.IP "\fBplugin_log\fR ()" 4
.IX Item "plugin_log ()"
.RE
.RS 4
.RE
.IP "\fB:types\fR" 4
.IX Item ":types"
.RS 4
.IP "\fB\s-1TYPE_INIT\s0\fR" 4
.IX Item "TYPE_INIT"
.IP "\fB\s-1TYPE_READ\s0\fR" 4
.IX Item "TYPE_READ"
.IP "\fB\s-1TYPE_WRITE\s0\fR" 4
.IX Item "TYPE_WRITE"
.IP "\fB\s-1TYPE_SHUTDOWN\s0\fR" 4
.IX Item "TYPE_SHUTDOWN"
.IP "\fB\s-1TYPE_LOG\s0\fR" 4
.IX Item "TYPE_LOG"
.RE
.RS 4
.RE
.IP "\fB:ds_types\fR" 4
.IX Item ":ds_types"
.RS 4
.IP "\fB\s-1DS_TYPE_COUNTER\s0\fR" 4
.IX Item "DS_TYPE_COUNTER"
.IP "\fB\s-1DS_TYPE_GAUGE\s0\fR" 4
.IX Item "DS_TYPE_GAUGE"
.RE
.RS 4
.RE
.IP "\fB:log\fR" 4
.IX Item ":log"
.RS 4
.IP "\fB\s-1ERROR\s0\fR ()" 4
.IX Item "ERROR ()"
.IP "\fB\s-1WARNING\s0\fR ()" 4
.IX Item "WARNING ()"
.IP "\fB\s-1NOTICE\s0\fR ()" 4
.IX Item "NOTICE ()"
.IP "\fB\s-1INFO\s0\fR ()" 4
.IX Item "INFO ()"
.IP "\fB\s-1DEBUG\s0\fR ()" 4
.IX Item "DEBUG ()"
.IP "\fB\s-1LOG_ERR\s0\fR" 4
.IX Item "LOG_ERR"
.IP "\fB\s-1LOG_WARNING\s0\fR" 4
.IX Item "LOG_WARNING"
.IP "\fB\s-1LOG_NOTICE\s0\fR" 4
.IX Item "LOG_NOTICE"
.IP "\fB\s-1LOG_INFO\s0\fR" 4
.IX Item "LOG_INFO"
.IP "\fB\s-1LOG_DEBUG\s0\fR" 4
.IX Item "LOG_DEBUG"
.RE
.RS 4
.RE
.PD
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Any Perl plugin will start similar to:
.PP
.Vb 1
\&  package Collectd::Plugins::FooBar;
.Ve
.PP
.Vb 2
\&  use strict;
\&  use warnings;
.Ve
.PP
.Vb 1
\&  use Collectd qw( :all );
.Ve
.PP
A very simple read function will look like:
.PP
.Vb 7
\&  sub foobar_read
\&  {
\&    my $vl = { plugin => \(aqfoobar\(aq };
\&    $vl\->{\(aqvalues\(aq} = [ rand(42) ];
\&    plugin_dispatch_values (\(aqgauge\(aq, $vl);
\&    return 1;
\&  }
.Ve
.PP
A very simple write function will look like:
.PP
.Vb 8
\&  sub foobar_write
\&  {
\&    my ($type, $ds, $vl) = @_;
\&    for (my $i = 0; $i < scalar (@$ds); ++$i) {
\&      print "$vl\->{\(aqplugin\(aq} ($vl\->{\(aqtype\(aq}): $vl\->{\(aqvalues\(aq}\->[$i]\en";
\&    }
\&    return 1;
\&  }
.Ve
.PP
To register those functions with collectd:
.PP
.Vb 2
\&  plugin_register (TYPE_READ, "foobar", \e&foobar_read);
\&  plugin_register (TYPE_WRITE, "foobar", \e&foobar_write);
.Ve
.PP
See the section \*(L"\s-1DATA\s0 \s-1TYPES\s0\*(R" above for a complete documentation of the data
types used by the read and write functions.
.SH "BUGS"
.IX Header "BUGS"
This plugin does not yet work correctly if collectd uses multiple threads.
Perl does not allow multiple threads to access a single interpreter at the
same time. As a temporary workaround you should use a single read thread only
(see collectd's \fBReadThread\fR configuration option).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIcollectd\fR\|(1),
\&\fIcollectd.conf\fR\|(5),
\&\fIcollectd\-exec\fR\|(5),
\&\fIperl\fR\|(1),
\&\fIperldebug\fR\|(1)
.SH "AUTHOR"
.IX Header "AUTHOR"
The \f(CW\*(C`perl plugin\*(C'\fR has been written by Sebastian Harl
<sh\ at\ tokkee.org>.
.PP
This manpage has been written by Florian Forster
<octo\ at\ verplant.org> and Sebastian Harl
<sh\ at\ tokkee.org>.
