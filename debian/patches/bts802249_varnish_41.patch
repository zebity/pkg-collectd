Author: Marc Fournier <marc@bl.uem.li>
Description: disable metrics which have been removed from varnish 4.1.0. This
is a temporary fix to allow the build to succeed. Proper support for recent
varnish version is expected in a future collectd release.
https://github.com/collectd/collectd/issues/1302 keeps track of this problem.
--- a/src/varnish.c
+++ b/src/varnish.c
@@ -200,7 +200,7 @@ static void varnish_monitor (const user_config_t *conf, /* {{{ */
 		/* Backend conn. reuses        */
 		varnish_submit_derive (conf->instance, "backend", "connections", "reuses"       , stats->backend_reuse);
 		/* Backend conn. was closed    */
-		varnish_submit_derive (conf->instance, "backend", "connections", "was-closed"   , stats->backend_toolate);
+		//varnish_submit_derive (conf->instance, "backend", "connections", "was-closed"   , stats->backend_toolate);
 		/* Backend conn. recycles      */
 		varnish_submit_derive (conf->instance, "backend", "connections", "recycled"     , stats->backend_recycle);
 #if HAVE_VARNISH_V2
@@ -229,11 +229,11 @@ static void varnish_monitor (const user_config_t *conf, /* {{{ */
 		/* Fetch bad headers         */
 		varnish_submit_derive (conf->instance, "fetch", "http_requests", "bad_headers", stats->fetch_bad);
 		/* Fetch wanted close        */
-		varnish_submit_derive (conf->instance, "fetch", "http_requests", "close"      , stats->fetch_close);
+		//varnish_submit_derive (conf->instance, "fetch", "http_requests", "close"      , stats->fetch_close);
 		/* Fetch pre HTTP/1.1 closed */
-		varnish_submit_derive (conf->instance, "fetch", "http_requests", "oldhttp"    , stats->fetch_oldhttp);
+		//varnish_submit_derive (conf->instance, "fetch", "http_requests", "oldhttp"    , stats->fetch_oldhttp);
 		/* Fetch zero len            */
-		varnish_submit_derive (conf->instance, "fetch", "http_requests", "zero"       , stats->fetch_zero);
+		//varnish_submit_derive (conf->instance, "fetch", "http_requests", "zero"       , stats->fetch_zero);
 		/* Fetch failed              */
 		varnish_submit_derive (conf->instance, "fetch", "http_requests", "failed"     , stats->fetch_failed);
 #if HAVE_VARNISH_V3 || HAVE_VARNISH_V4
@@ -348,7 +348,7 @@ static void varnish_monitor (const user_config_t *conf, /* {{{ */
 		/* Session Closed     */
 		varnish_submit_derive (conf->instance, "session", "total_operations", "closed",    stats->sess_closed);
 		/* Session Pipeline   */
-		varnish_submit_derive (conf->instance, "session", "total_operations", "pipeline",  stats->sess_pipeline);
+		//varnish_submit_derive (conf->instance, "session", "total_operations", "pipeline",  stats->sess_pipeline);
 		/* Session Read Ahead */
 		varnish_submit_derive (conf->instance, "session", "total_operations", "readahead", stats->sess_readahead);
 #if HAVE_VARNISH_V4
@@ -359,7 +359,7 @@ static void varnish_monitor (const user_config_t *conf, /* {{{ */
 		/* Sessions accept failure */
 		varnish_submit_derive (conf->instance, "session", "total_operations", "failed",    stats->sess_fail);
 		/* Sessions pipe overflow */
-		varnish_submit_derive (conf->instance, "session", "total_operations", "overflow",  stats->sess_pipe_overflow);
+		//varnish_submit_derive (conf->instance, "session", "total_operations", "overflow",  stats->sess_pipe_overflow);
 		/* Sessions queued for thread */
 		varnish_submit_derive (conf->instance, "session", "total_operations", "queued",    stats->sess_queued);
 #else
@@ -415,15 +415,15 @@ static void varnish_monitor (const user_config_t *conf, /* {{{ */
 	if (conf->collect_sms)
 	{
 		/* SMS allocator requests */
-		varnish_submit_derive (conf->instance, "sms", "total_requests", "allocator", stats->sms_nreq);
+		//varnish_submit_derive (conf->instance, "sms", "total_requests", "allocator", stats->sms_nreq);
 		/* SMS outstanding allocations */
-		varnish_submit_gauge (conf->instance,  "sms", "requests", "outstanding",     stats->sms_nobj);
+		//varnish_submit_gauge (conf->instance,  "sms", "requests", "outstanding",     stats->sms_nobj);
 		/* SMS outstanding bytes */
-		varnish_submit_gauge (conf->instance,  "sms", "bytes", "outstanding",        stats->sms_nbytes);
+		//varnish_submit_gauge (conf->instance,  "sms", "bytes", "outstanding",        stats->sms_nbytes);
 		/* SMS bytes allocated */
-		varnish_submit_derive (conf->instance,  "sms", "total_bytes", "allocated",   stats->sms_balloc);
+		//varnish_submit_derive (conf->instance,  "sms", "total_bytes", "allocated",   stats->sms_balloc);
 		/* SMS bytes freed */
-		varnish_submit_derive (conf->instance,  "sms", "total_bytes", "free",        stats->sms_bfree);
+		//varnish_submit_derive (conf->instance,  "sms", "total_bytes", "free",        stats->sms_bfree);
 	}
 
 	if (conf->collect_struct)
